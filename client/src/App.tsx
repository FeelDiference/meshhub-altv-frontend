import React, { useState, useEffect } from 'react'
import { Car, Settings, MapPin, Zap, LogOut, User, Loader2, AlertCircle, Download, Play, RotateCcw, Search, X } from 'lucide-react'
import toast, { Toaster } from 'react-hot-toast'
import { LoginPage } from '@/pages/LoginPage'
import TuningSliders from '@/components/vehicles/TuningSliders'
import HandlingMetaEditor from '@/components/vehicles/HandlingMetaEditor'
import VehicleActions from '@/components/vehicles/VehicleActions'
import Portal from '@/components/common/Portal'
import { fetchHandlingMeta } from '@/services/rpf'
import { updateXmlNumericValue, paramToXmlTag } from '@/utils/updateXml'
import { useAuth } from '@/hooks/useAuth'
import { useALTV } from '@/hooks/useALTV'
import { Button } from '@/components/common/Button'
import { getVehicles } from '@/services/vehicles'
import type { VehicleResource } from '@/types/vehicle'
import { logAppPathInfo } from '@/utils/pathDetection'
import { downloadVehicleWithStatus, reloadVehicle, type VehicleStatus } from '@/services/vehicleManager'
import { getAccessToken } from '@/services/auth'

const Dashboard = () => (
  <div className="flex-1 p-6">
    <div className="text-center">
      <h1 className="text-2xl font-bold text-white mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
      <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞</p>
    </div>
  </div>
)

const VehiclesPage = () => {
  
  const { spawnVehicle, destroyVehicle, currentVehicle, isAvailable, updateHandling, resetHandling, requestHandlingMeta } = useALTV({
    onVehicleSpawned: (data) => {
      toast.success(`${data.modelName} –∑–∞—Å–ø–∞–≤–Ω–µ–Ω`)
    },
    onVehicleDestroyed: (data) => {
      toast('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª—ë–Ω', { icon: 'üóëÔ∏è' })
    }
  })
  // UI state for side panels
  const [selectedVehicle, setSelectedVehicle] = useState<VehicleResource | null>(null)
  const [handlingMetaXml, setHandlingMetaXml] = useState<string>('')
  const [showTuning, setShowTuning] = useState(false)
  const [showMeta, setShowMeta] = useState(false)
  const [showActions, setShowActions] = useState(false)
  const [focusMode, setFocusMode] = useState<'off' | 'tuning' | 'actions'>('off') // –†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞: –≤—ã–∫–ª / –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã / –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
  const panelLeft = 420 // —Å–¥–≤–∏–≥ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è (–ø—Ä–∏–º–µ—Ä–Ω–æ —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é + –æ—Ç—Å—Ç—É–ø)
  const [activeModel, setActiveModel] = useState<string>('')
  const [panelsVisible, setPanelsVisible] = useState<boolean>(false)
  const [pendingModelToSelect, setPendingModelToSelect] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState<string>('')
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö XML –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã (–∫–ª—é—á = vehicle.name)
  const vehicleXmlCache = React.useRef<Map<string, string>>(new Map())
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫–æ–π –º–∞—à–∏–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–∏–π XML
  const currentXmlVehicleName = React.useRef<string | null>(null)

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è XML –≤ –∫—ç—à –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    if (selectedVehicle && handlingMetaXml && currentXmlVehicleName.current === selectedVehicle.name) {
      console.log('[VehiclesPage] Updating XML cache for', selectedVehicle.name)
      vehicleXmlCache.current.set(selectedVehicle.name, handlingMetaXml)
    }
  }, [handlingMetaXml, selectedVehicle])

  // When vehicle selected or entered, show panels and request handling meta
  useEffect(() => {
    if (!selectedVehicle) return
    setShowTuning(true)
    setShowMeta(true)
    setShowActions(true)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π XML –≤ –∫—ç—à–µ
    const cachedXml = vehicleXmlCache.current.get(selectedVehicle.name)
    if (cachedXml) {
      console.log('[VehiclesPage] Loading XML from cache for', selectedVehicle.name)
      setHandlingMetaXml(cachedXml)
      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π XML –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –º–∞—à–∏–Ω–µ
      currentXmlVehicleName.current = selectedVehicle.name
      return
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π handling.meta —Å –±—ç–∫–∞
    console.log('[VehiclesPage] Fetching fresh XML for', selectedVehicle.name)
    fetchHandlingMeta(selectedVehicle.name)
      .then(xml => {
        setHandlingMetaXml(xml)
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π XML –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –º–∞—à–∏–Ω–µ
        currentXmlVehicleName.current = selectedVehicle.name
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        vehicleXmlCache.current.set(selectedVehicle.name, xml)
      })
      .catch(() => {
        // fallback —á–µ—Ä–µ–∑ ALT (–µ—Å–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω) –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ
        if (typeof window !== 'undefined' && 'alt' in window) {
          requestHandlingMeta(selectedVehicle.modelName || selectedVehicle.name)
        }
      })
  }, [selectedVehicle, requestHandlingMeta])

  // Listen for handling.meta response
  useEffect(() => {
    if (!(typeof window !== 'undefined' && 'alt' in window)) return
    
    // –ê–≤—Ç–æ-–æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ/–≤—ã—Ö–æ–¥–µ
    const onEnter = (data: any) => {
      console.log('[VehiclesPage] Player entered vehicle:', data)
      const mdl = data?.modelName || currentVehicle?.modelName
      if (!mdl) return
      
      setActiveModel(mdl)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–µ–∂–µ–º—É vehicles
      setVehicles(currentVehicles => {
        const found = currentVehicles.find(x => (x.modelName || x.name) === mdl)
        if (found) {
          console.log('[VehiclesPage] Found vehicle in list:', found.name)
          setSelectedVehicle(found)
          setPanelsVisible(true)
          setShowTuning(true)
          setShowMeta(true)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
          const cachedXml = vehicleXmlCache.current.get(found.name)
          if (cachedXml) {
            console.log('[VehiclesPage] onEnter: Loading XML from cache for', found.name)
            setHandlingMetaXml(cachedXml)
            currentXmlVehicleName.current = found.name
          } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º handling.meta –¥–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã
            fetchHandlingMeta(found.name)
              .then(xml => {
                console.log('[VehiclesPage] onEnter: Loaded handling.meta for', found.name)
                setHandlingMetaXml(xml)
                currentXmlVehicleName.current = found.name
                vehicleXmlCache.current.set(found.name, xml)
              })
              .catch((err) => {
                console.warn('[VehiclesPage] Failed to fetch handling.meta:', err)
              })
          }
        } else {
          console.warn('[VehiclesPage] Vehicle not found in list:', mdl)
          setPendingModelToSelect(mdl)
        }
        return currentVehicles // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      })
    }
    
    const onLeft = () => {
      setShowTuning(false)
      setShowMeta(false)
      setPanelsVisible(false)
    }
    
    const onMeta = (data: { modelName: string; xml: string }) => {
      console.log('[VehiclesPage] onMeta: Received XML for', data.modelName)
      setHandlingMetaXml(data.xml || '')
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à - –∏—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ selectedVehicle
      setSelectedVehicle(current => {
        if (current && data.modelName === (current.modelName || current.name)) {
          currentXmlVehicleName.current = current.name
          vehicleXmlCache.current.set(current.name, data.xml || '')
        }
        return current
      })
    }
    
    const onPanelOpened = () => {}
    const onPanelClosed = () => {}
    
    ;(window as any).alt.on('handling:meta:response', onMeta)
    ;(window as any).alt.on('player:entered:vehicle', onEnter)
    ;(window as any).alt.on('player:left:vehicle', onLeft)
    ;(window as any).alt.on('altv:panel:opened', onPanelOpened)
    ;(window as any).alt.on('altv:panel:closed', onPanelClosed)
    
    return () => {
      (window as any).alt.off?.('handling:meta:response', onMeta)
      ;(window as any).alt.off?.('player:entered:vehicle', onEnter)
      ;(window as any).alt.off?.('player:left:vehicle', onLeft)
      ;(window as any).alt.off?.('altv:panel:opened', onPanelOpened)
      ;(window as any).alt.off?.('altv:panel:closed', onPanelClosed)
    }
  }, [currentVehicle])
  
  console.log('[VehiclesPage] useALTV isAvailable:', isAvailable)

  const [vehicles, setVehicles] = useState<VehicleResource[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [vehicleStatuses, setVehicleStatuses] = useState<Map<string, VehicleStatus>>(new Map())
  const [pendingRestartIds, setPendingRestartIds] = useState<Set<string>>(new Set())

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å backend
  useEffect(() => {
    const loadVehicles = async () => {
      try {
        setLoading(true)
        setError(null)
        const vehiclesList = await getVehicles()
        setVehicles(vehiclesList)
        try { (window as any).alt?.emit?.('vehicles:list:sync', vehiclesList) } catch {}
        try { (window as any).alt?.emit?.('vehicles:list:sync', vehiclesList) } catch {}
        
        // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (Alt:V)
        if (typeof window !== 'undefined' && 'alt' in window) {
          try {
            // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            ;(window as any).alt.emit('vehicle:installed:list:request')
          } catch (e) {
            console.warn('[Installed] Request failed:', e)
          }
        }
        
        // –í –±—Ä–∞—É–∑–µ—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–∫ –Ω–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ
        const statusMap = new Map<string, VehicleStatus>()
        for (const vehicle of vehiclesList) {
          statusMap.set(vehicle.id, 'not_downloaded')
        }
        setVehicleStatuses(statusMap)
        
      } catch (err: any) {
        setError(err.message)
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', err)
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
      } finally {
        setLoading(false)
      }
    }
    
    loadVehicles()
  }, [])

  // –î–æ–∂–∏–º–∞–µ–º –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—à–ª–æ —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Å–ø–∏—Å–æ–∫
  useEffect(() => {
    if (!pendingModelToSelect) return
    const found = vehicles.find(v => (v.modelName || v.name) === pendingModelToSelect)
    if (found) {
      setSelectedVehicle(found)
      setPendingModelToSelect(null)
    }
  }, [vehicles, pendingModelToSelect])
  
  // –°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∏–ª –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞
  useEffect(() => {
    if (typeof window !== 'undefined' && 'alt' in window) {
      const handleDownloaded = (data: { success: boolean; vehicleId: string; vehicleName: string; message: string }) => {
        
        if (data.success) {
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É—é—â–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞
          setVehicleStatuses(prev => new Map(prev.set(data.vehicleId, 'downloaded')))
          setPendingRestartIds(prev => {
            const next = new Set(prev)
            next.add(data.vehicleId)
            return next
          })
          toast.success(`${data.vehicleName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞`, {
            duration: 5000,
          })
        } else {
          setVehicleStatuses(prev => new Map(prev.set(data.vehicleId, 'not_downloaded')))
          setPendingRestartIds(prev => {
            const next = new Set(prev)
            next.delete(data.vehicleId)
            return next
          })
          toast.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${data.vehicleName}:\n${data.message}`, {
            duration: 5000,
          })
        }
      }

      const handleHandlingSaved = (data: { success: boolean; fileName?: string; filePath?: string; downloadsPath?: string; error?: string }) => {
        if (data.success) {
          toast.success(`–§–∞–π–ª ${data.fileName} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫—É Downloads!\n–ü—É—Ç—å: ${data.downloadsPath}`, {
            duration: 7000,
          })
        } else {
          toast.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${data.error}`, {
            duration: 5000,
          })
        }
      }

      ;(window as any).alt.on('vehicle:downloaded', handleDownloaded)
      ;(window as any).alt.on('meshhub:vehicle:handling:saved', handleHandlingSaved)
      return () => {
        (window as any).alt.off?.('vehicle:downloaded', handleDownloaded)
        ;(window as any).alt.off?.('meshhub:vehicle:handling:saved', handleHandlingSaved)
      }
    }
  }, [])

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
  useEffect(() => {
    if (!(typeof window !== 'undefined' && 'alt' in window)) return
    
    const onInstalled = (installedNames: string[]) => {
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ vehicles
      setVehicles(currentVehicles => {
        
        
        
        for (const installedName of installedNames) {
          const found = currentVehicles.find(v => v.name === installedName)
        }
        
        setVehicleStatuses(prev => {
          const m = new Map(prev)
          for (const v of currentVehicles) {
            if (installedNames?.includes(v.name)) {
              m.set(v.id, 'downloaded')
            }
          }
          return m
        })
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
        setPendingRestartIds(prev => {
          const next = new Set(prev)
          for (const v of currentVehicles) {
            if (installedNames?.includes(v.name)) next.delete(v.id)
          }
          return next
        })
        
        return currentVehicles // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      })
    }
    
    ;(window as any).alt.on('vehicle:installed:list:response', onInstalled)
    return () => (window as any).alt.off?.('vehicle:installed:list:response', onInstalled)
  }, [])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω –ø–æ –ø–æ–∏—Å–∫—É
  const filteredVehicles = vehicles
    .filter(v => {
      if (!searchQuery.trim()) return true
      const q = searchQuery.toLowerCase()
      return (
        v.name?.toLowerCase().includes(q) ||
        v.displayName?.toLowerCase().includes(q) ||
        v.modelName?.toLowerCase().includes(q) ||
        v.manufacturer?.toLowerCase().includes(q)
      )
    })
    .sort((a, b) => {
      // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–≤–µ—Ä—Ö—É
      const aInstalled = vehicleStatuses.get(a.id) === 'downloaded'
      const bInstalled = vehicleStatuses.get(b.id) === 'downloaded'
      
      if (aInstalled && !bInstalled) return -1
      if (!aInstalled && bInstalled) return 1
      
      // –ï—Å–ª–∏ –æ–±–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –æ–±–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –ø–æ –∏–º–µ–Ω–∏
      return (a.displayName || a.name).localeCompare(b.displayName || b.name)
    })

  return (
    <div className="flex-1 p-6 relative">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-white mb-2">–ê–≤—Ç–æ–º–æ–±–∏–ª–∏</h1>
        <div className="flex items-center space-x-2 text-sm mb-4">
          <div className={`px-2 py-1 rounded-full text-xs ${
            isAvailable ? 'bg-green-900 text-green-300' : 'bg-orange-900 text-orange-300'
          }`}>
            {isAvailable ? 'üéÆ ALT:V' : 'üåê Browser'}
          </div>
          {currentVehicle && (
            <div className="px-2 py-1 bg-blue-900 text-blue-300 rounded-full text-xs">
              Current: {currentVehicle.modelName}
            </div>
          )}
        </div>
        
        {/* –ü–æ–∏—Å–∫ */}
        <div className="space-y-2">
          <div className="relative">
            <div className="absolute left-3 top-1/2 -translate-y-1/2 pointer-events-none">
              <Search className="w-4 h-4 text-gray-500" />
            </div>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –º–æ–¥–µ–ª–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-10 py-2.5 bg-base-800/50 border border-base-700 rounded-lg text-white text-sm placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:border-primary-500/50 transition-all"
            />
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-300 transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>
          {searchQuery && (
            <div className="text-xs text-gray-500">
              –ù–∞–π–¥–µ–Ω–æ: <span className="text-primary-400 font-medium">{filteredVehicles.length}</span> –∏–∑ {vehicles.length}
            </div>
          )}
        </div>
      </div>

      {/* Vehicle Grid */}
      {loading && (
        <div className="flex items-center justify-center py-8">
          <Loader2 className="w-6 h-6 animate-spin text-primary-400" />
          <span className="ml-2 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...</span>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-900/20 border border-red-500/30 rounded-lg">
          <div className="flex items-center space-x-2">
            <AlertCircle className="w-4 h-4 text-red-400" />
            <span className="text-red-400 text-sm">{error}</span>
          </div>
        </div>
      )}

      {!loading && !error && (
        <div className="grid grid-cols-1 gap-3">
          {filteredVehicles.length === 0 ? (
            <div className="p-8 text-center text-gray-500">
              {searchQuery ? `–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"` : '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
            </div>
          ) : (
            filteredVehicles.map((vehicle) => {
              const vehicleStatus = vehicleStatuses.get(vehicle.id) || 'not_downloaded'
              const isDownloaded = vehicleStatus === 'downloaded'
              const isChecking = vehicleStatus === 'checking'
              const isPendingRestart = pendingRestartIds.has(vehicle.id)
              
              const handleDownload = async () => {
                try {
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'checking')))
                  const isAltV = typeof window !== 'undefined' && 'alt' in window
                  console.log(`[Download] Alt:V available: ${isAltV}`)
                  if (isAltV) {
                    const token = getAccessToken()
                    if (!token) {
                      console.error('[Download] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage')
                      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                    console.log(`[Download] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ server-side —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${vehicle.name}`)
                    console.log(`[Download] Vehicle ID: ${vehicle.id}`)
                    console.log(`[Download] Token: ${token.substring(0, 20)}...`)
                    ;(window as any).alt.emit('vehicle:download', {
                      vehicleId: vehicle.id,
                      vehicleName: vehicle.name,
                      token: token
                    })
                    console.log('[Download] –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...')
                  } else {
                    console.log('[Download] –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ blob')
                    await downloadVehicleWithStatus(vehicle)
                  }
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'not_downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.delete(vehicle.id); return next })
                }
              }
              
              const handleReload = async () => {
                try {
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'checking')))
                  await reloadVehicle(vehicle)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.add(vehicle.id); return next })
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'not_downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.delete(vehicle.id); return next })
                }
              }
              
              const handleSpawn = () => {
                spawnVehicle(vehicle.modelName || vehicle.name)
              }
              
              const isActive = panelsVisible && selectedVehicle?.id === vehicle.id
              const isCurrentVehicle = currentVehicle && (currentVehicle.modelName === vehicle.name || currentVehicle.modelName === vehicle.modelName)
              return (
                <div
                  key={vehicle.id}
                  className={`relative p-4 rounded-lg border transition-colors ${
                    isActive
                      ? 'border-fuchsia-500/60 bg-fuchsia-900/10'
                      : 'bg-base-800 border-base-700 hover:bg-base-700'
                  }`}
                  onClick={() => {
                    // –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                    setPanelsVisible(v => {
                      const same = selectedVehicle?.id === vehicle.id
                      const nextVisible = same ? !v : true
                      setShowTuning(nextVisible)
                      setShowMeta(nextVisible)
                      return nextVisible
                    })
                    setSelectedVehicle(vehicle)
                  }}
                >
                  {isActive && (
                    <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-pink-500 to-fuchsia-500 rounded-l" />
                  )}
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="text-sm font-medium flex items-center space-x-2">
                        {isCurrentVehicle && (
                          <div className="w-2 h-2 rounded-full bg-violet-500 animate-pulse" title="–í—ã –≤ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ" />
                        )}
                        <span className={isActive ? 'bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-fuchsia-400' : 'text-white'}>
                          {vehicle.displayName || vehicle.name}
                        </span>
                        {isPendingRestart && (
                          <span className="inline-flex items-center h-5 px-2 text-[10px] leading-none rounded-full bg-orange-900 text-orange-300">–ù—É–∂–µ–Ω —Ä–µ—Å—Ç–∞—Ä—Ç</span>
                        )}
                      </div>
                      <div className="text-xs text-gray-400">{vehicle.name}</div>
                      {vehicle.tags && vehicle.tags.length > 0 && (
                        <div className="flex space-x-1 mt-1">
                          {vehicle.tags.slice(0, 3).map((tag, index) => (
                            <span key={index} className="px-1 py-0.5 bg-primary-900 text-primary-300 text-xs rounded">
                              {tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
                      <div className="flex items-center space-x-2">
                        <Car className="w-4 h-4 text-primary-400" />
                        <span className="text-xs text-gray-500">
                          {(vehicle.size / 1024 / 1024).toFixed(1)}MB
                        </span>
                      </div>
                      
                      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                      <div className="flex items-center space-x-1">
                        {!isDownloaded ? (
                          <button
                            onClick={handleDownload}
                            disabled={isChecking}
                            className="p-2 text-blue-400 hover:text-blue-300 hover:bg-blue-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="–°–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                          >
                            <Download className="w-4 h-4" />
                          </button>
                        ) : (
                          <>
                            <button
                              onClick={handleSpawn}
                              disabled={!isAvailable || isChecking || isPendingRestart}
                              className="p-2 text-green-400 hover:text-green-300 hover:bg-green-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title={isPendingRestart ? '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞' : '–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'}
                            >
                              <Play className="w-4 h-4" />
                            </button>
                            <button
                              onClick={handleReload}
                              disabled={isChecking}
                              className="p-2 text-orange-400 hover:text-orange-300 hover:bg-orange-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                            >
                              <RotateCcw className="w-4 h-4" />
                            </button>
                          </>
                        )}
                        {isChecking && (
                          <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )
            })
          )}
        </div>
      )}

      {/* Current Vehicle Controls */}
      {currentVehicle && (
        <div className="mt-6 p-4 bg-base-800 rounded-lg">
          <h3 className="text-sm font-medium text-white mb-3">–¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å</h3>
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-white">{currentVehicle.modelName}</div>
              <div className="text-xs text-gray-400">ID: {currentVehicle.id}</div>
            </div>
            <Button
              onClick={() => destroyVehicle()}
              variant="danger"
              size="sm"
              className="text-xs"
            >
              –£–¥–∞–ª–∏—Ç—å
            </Button>
          </div>
        </div>
      )}

      {/* Info */}
      <div className="mt-6 p-4 bg-base-800 rounded-lg">
        <div className="text-xs text-gray-400">
          {isAvailable 
            ? 'üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ALT:V - –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±—É–¥—É—Ç –∑–∞—Å–ø–∞–≤–Ω–µ–Ω—ã –≤ –∏–≥—Ä–µ'
            : 'üåê –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'
          }
        </div>
      </div>

      {/* Right side panels (tuning + meta editor) in a portal to escape layout */}
      {panelsVisible && (
        <Portal>
        <div 
          className="pointer-events-auto fixed top-16 bottom-4 z-[9999] flex flex-col space-y-3 transition-all duration-300" 
          style={{ 
            left: focusMode !== 'off' ? 24 : panelLeft, 
            right: 24 
          }}
        >
          {/* Header over both panels - —Å–∫—Ä—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ–∫—É—Å–∞ */}
          {focusMode === 'off' && (
            <div
              className="w-[1880px] max-w-[calc(100vw-480px)] rounded-lg p-3 flex items-center space-x-3 border border-white/10 bg-gradient-to-r from-[#141421] via-[#171927] to-[#0f1913] shadow-[inset_0_1px_0_rgba(255,255,255,.06)] cursor-pointer animate-slide-in-left"
              title="–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª–∏"
              onClick={() => {
                setPanelsVisible(v => {
                  setShowTuning(!v)
                  setShowMeta(!v)
                  setShowActions(!v)
                  return !v
                })
              }}
            >
              <div className="w-8 h-8 rounded-lg bg-violet-600/30 ring-1 ring-violet-500/40 flex items-center justify-center">
                <Car className="w-4 h-4 text-violet-200" />
              </div>
              <div className="text-sm font-semibold truncate bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-fuchsia-400">
                {selectedVehicle?.displayName || selectedVehicle?.name || activeModel || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'}
              </div>
            </div>
          )}
          <div className="flex space-x-3 flex-1 overflow-hidden">
          {/* Tuning sliders panel - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤—ã–∫–ª –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ —Ç—é–Ω–∏–Ω–≥–µ */}
          {(() => {
            const vehicleStatus = selectedVehicle ? vehicleStatuses.get(selectedVehicle.id) : null
            console.log('[TuningPanel] Check visibility:')
            console.log('  - focusMode:', focusMode)
            console.log('  - showTuning:', showTuning)
            console.log('  - selectedVehicle:', selectedVehicle?.name)
            console.log('  - vehicleStatus:', vehicleStatus)
            console.log('  - shouldShow:', (focusMode === 'off' || focusMode === 'tuning') && showTuning && selectedVehicle && vehicleStatus === 'downloaded')
            return null
          })()}
          {(focusMode === 'off' || focusMode === 'tuning') && showTuning && selectedVehicle && vehicleStatuses.get(selectedVehicle.id) === 'downloaded' && (
            <div className="w-[620px] h-[calc(100vh-190px)] overflow-y-auto bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left">
              <div className="text-sm font-semibold text-white mb-3">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</div>
              <TuningSliders
                onChange={(param, value) => updateHandling(param, value)}
                onReset={() => resetHandling()}
                onXmlPatch={(param, value) => {
                  const tag = paramToXmlTag[param]
                  if (!tag || !handlingMetaXml) return
                  setHandlingMetaXml(prev => updateXmlNumericValue(prev, tag, value))
                }}
                disabled={!currentVehicle || !selectedVehicle || ![selectedVehicle.name, selectedVehicle.modelName].includes(currentVehicle.modelName)}
                initialValues={handlingMetaXml}
                vehicleKey={selectedVehicle.name}
                currentXml={handlingMetaXml}
                onFocusModeToggle={() => setFocusMode(focusMode === 'tuning' ? 'off' : 'tuning')}
                focusMode={focusMode === 'tuning'}
              />
            </div>
          )}
          {/* Handling.meta editor panel - —Å–∫—Ä—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ —Ñ–æ–∫—É—Å–µ */}
          {focusMode === 'off' && showMeta && selectedVehicle && (
            <div className="w-[620px] h-[calc(100vh-190px)] overflow-hidden bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left">
              <div className="text-sm font-semibold text-white mb-2">handling.meta</div>
              <HandlingMetaEditor xml={handlingMetaXml} onXmlChange={setHandlingMetaXml} />
            </div>
          )}
          
          {/* Vehicle actions panel - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤—ã–∫–ª –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö */}
          {(focusMode === 'off' || focusMode === 'actions') && showActions && selectedVehicle && (
            <div 
              className={`${
                focusMode === 'actions' ? 'w-[400px]' : 'w-[620px]'
              } h-[calc(100vh-190px)] overflow-hidden bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left transition-all duration-300`}
            >
              <VehicleActions 
                disabled={!currentVehicle || !selectedVehicle || ![selectedVehicle.name, selectedVehicle.modelName].includes(currentVehicle.modelName)}
                onAction={(action, data) => {
                  console.log('[VehiclesPage] Vehicle action:', action, data)
                }}
                onFocusModeToggle={() => setFocusMode(focusMode === 'actions' ? 'off' : 'actions')}
                focusMode={focusMode === 'actions'}
                vehicleName={selectedVehicle?.name || selectedVehicle?.modelName}
              />
            </div>
          )}
          </div>
        </div>
        </Portal>
      )}
    </div>
  )
}

const InteriorPlaceholder = () => (
  <div className="flex-1 p-6">
    <h1 className="text-2xl font-bold text-white mb-4">–ò–Ω—Ç–µ—Ä—å–µ—Ä—ã</h1>
    <p className="text-gray-400">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ</p>
  </div>
)

const WeaponsPlaceholder = () => (
  <div className="flex-1 p-6">
    <h1 className="text-2xl font-bold text-white mb-4">–û—Ä—É–∂–∏–µ</h1>
    <p className="text-gray-400">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ</p>
  </div>
)

// –¢–∏–ø—ã –¥–ª—è –º–µ–Ω—é
interface MenuItem {
  id: string
  label: string
  icon: React.ComponentType<any>
  component: React.ComponentType
  enabled: boolean
  order: number
}

function App() {
  const { isAuthenticated, isLoading, user, logout } = useAuth()
  const [currentPage, setCurrentPage] = useState('dashboard')
  const [, forceUpdate] = useState({})
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    console.log('[App] üöÄ App component mounted')
    console.log('[App] window.location:', window.location.href)
    console.log('[App] window.alt exists:', 'alt' in window)
    if ('alt' in window) {
      console.log('[App] ‚úÖ Running in Alt:V WebView')
    } else {
      console.log('[App] üåê Running in browser')
    }
    logAppPathInfo()
  }, [])
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  console.log('üéØ App render - isAuthenticated:', isAuthenticated, 'isLoading:', isLoading, 'user:', user)
  
  // ALT:V –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  const { closePanel, isAvailable: altvAvailable } = useALTV()

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && altvAvailable) {
        closePanel()
      }
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è focusMode –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    const handleFocusModeChange = () => {
      forceUpdate({})
    }
    
    window.addEventListener('focusModeChanged', handleFocusModeChange)
    document.addEventListener('keydown', handleKeyDown)
    return () => {
      window.removeEventListener('focusModeChanged', handleFocusModeChange)
      document.removeEventListener('keydown', handleKeyDown)
    }
  }, [altvAvailable, closePanel])

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω—é
  const menuItems: MenuItem[] = [
    {
      id: 'vehicles',
      label: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏',
      icon: Car,
      component: VehiclesPage,
      enabled: true,
      order: 1
    },
    {
      id: 'interiors',
      label: '–ò–Ω—Ç–µ—Ä—å–µ—Ä—ã',
      icon: MapPin,
      component: InteriorPlaceholder,
      enabled: false,
      order: 2
    },
    {
      id: 'weapons',
      label: '–û—Ä—É–∂–∏–µ',
      icon: Zap,
      component: WeaponsPlaceholder,
      enabled: false,
      order: 3
    }
  ].sort((a, b) => a.order - b.order)

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const getCurrentComponent = () => {
    if (currentPage === 'dashboard') return Dashboard
    const item = menuItems.find(item => item.id === currentPage)
    return item?.component || Dashboard
  }

  const CurrentComponent = getCurrentComponent()

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isLoading) {
    return (
      <div className="webview-panel w-full h-full flex items-center justify-center animate-fade-in">
        <div className="text-center">
          <div className="w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center mb-4 animate-pulse">
            <Settings className="w-5 h-5 text-white" />
          </div>
          <p className="text-gray-400 text-sm">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</p>
        </div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!isAuthenticated) {
    return (
      <div className="webview-panel w-full h-full animate-slide-in-right">
        <LoginPage />
      </div>
    )
  }

  return (
    <div className={`webview-panel w-full h-full flex flex-col animate-slide-in-right transition-opacity duration-300 ${
      (window as any).__focusMode !== 'off' && (window as any).__focusMode ? 'opacity-0 pointer-events-none' : ''
    }`}>
      {/* Header */}
      <div className="flex-shrink-0 p-4 border-b border-base-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center">
              <Settings className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-white">MeshHub</h1>
              <p className="text-xs text-gray-400">ALT:V Tools</p>
            </div>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã—Ö–æ–¥ */}
          <div className="flex items-center space-x-2">
            <div className="flex items-center space-x-2 px-3 py-1 bg-base-800 rounded-lg">
              <User className="w-3 h-3 text-gray-400" />
              <span className="text-xs text-gray-300">
                {user?.username || 'User'}
              </span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={logout}
              icon={<LogOut className="w-3 h-3" />}
              className="text-gray-400 hover:text-red-400"
              title="–í—ã–π—Ç–∏"
            />
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex-shrink-0 p-4 border-b border-base-700">
        <div className="space-y-2">
          <button
            onClick={() => setCurrentPage('dashboard')}
            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
              currentPage === 'dashboard' 
                ? 'bg-primary-600 text-white' 
                : 'text-gray-400 hover:text-white hover:bg-base-800'
            }`}
          >
            <Settings className="w-4 h-4" />
            <span className="text-sm">–ì–ª–∞–≤–Ω–∞—è</span>
          </button>
          
          {menuItems.map((item) => {
            const Icon = item.icon
            return (
              <button
                key={item.id}
                onClick={() => item.enabled && setCurrentPage(item.id)}
                disabled={!item.enabled}
                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
                  currentPage === item.id 
                    ? 'bg-primary-600 text-white' 
                    : item.enabled 
                      ? 'text-gray-400 hover:text-white hover:bg-base-800' 
                      : 'text-gray-600 cursor-not-allowed'
                }`}
              >
                <Icon className="w-4 h-4" />
                <span className="text-sm">{item.label}</span>
                {!item.enabled && (
                  <span className="ml-auto text-xs text-gray-500">Soon</span>
                )}
              </button>
            )
          })}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto">
        <CurrentComponent />
      </div>

      {/* Footer */}
      <div className="flex-shrink-0 p-4 border-t border-base-700">
        <div className="flex items-center justify-between text-xs">
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${
              altvAvailable ? 'bg-green-400' : 'bg-orange-400'
            }`} />
            <span className="text-gray-500">
              {altvAvailable ? 'ALT:V' : 'Browser'}
            </span>
          </div>
          <div className="text-gray-500">
            {altvAvailable ? 'F10 - toggle | ESC - close' : 'Demo Mode'}
          </div>
        </div>
      </div>
      
      {/* Toast Notifications */}
      <Toaster
        position="top-right"
        toastOptions={{
          duration: 3000,
          style: {
            background: '#1f1f1f',
            color: '#fff',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            borderRadius: '8px',
            fontSize: '14px',
          },
          success: {
            iconTheme: {
              primary: '#4ade80',
              secondary: '#1f1f1f',
            },
          },
          error: {
            iconTheme: {
              primary: '#ef4444',
              secondary: '#1f1f1f',
            },
          },
        }}
      />
    </div>
  )
}

export default App
