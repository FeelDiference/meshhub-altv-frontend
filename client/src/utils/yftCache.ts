/**
 * YFT Model Cache System
 * –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è YFT –º–æ–¥–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IndexedDB
 */

export interface CachedYFTData {
  /** –•—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
  fileHash: string
  /** –ò–º—è —Ñ–∞–π–ª–∞ */
  fileName: string
  /** –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö */
  fileSize: number
  /** –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ */
  cachedAt: number
  /** –í–µ—Ä—Å–∏—è –∫—ç—à–∞ (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π) */
  version: string
  /** –î–∞–Ω–Ω—ã–µ mesh –≤ —Ñ–æ—Ä–º–∞—Ç–µ ArrayBuffer */
  meshData: ArrayBuffer
  /** –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ */
  metadata: {
    vertexCount: number
    faceCount: number
    hasNormals: boolean
    hasUVs: boolean
    boundingBox: {
      min: [number, number, number]
      max: [number, number, number]
    }
  }
}

export interface CacheStats {
  totalItems: number
  totalSize: number
  oldestCache: number | null
  newestCache: number | null
}

export class YFTCache {
  private dbName = 'yft-cache'
  private dbVersion = 1
  private storeName = 'yft-models'
  private db: IDBDatabase | null = null
  private readonly maxCacheSize = 500 * 1024 * 1024 // 500MB
  private readonly maxCacheAge = 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
   */
  async init(): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.dbVersion)
      
      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        this.db = request.result
        resolve()
      }
      
      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result
        
        // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!db.objectStoreNames.contains(this.storeName)) {
          const store = db.createObjectStore(this.storeName, { keyPath: 'fileName' })
          store.createIndex('cachedAt', 'cachedAt', { unique: false })
          store.createIndex('fileHash', 'fileHash', { unique: false })
        }
      }
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IndexedDB
   */
  isAvailable(): boolean {
    return typeof indexedDB !== 'undefined'
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  async get(fileName: string, fileHash?: string): Promise<CachedYFTData | null> {
    if (!this.db) await this.init()
    if (!this.db) return null

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readonly')
      const store = transaction.objectStore(this.storeName)
      const request = store.get(fileName)

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        const result = request.result as CachedYFTData | undefined
        
        if (!result) {
          console.log(`[YFTCache] ‚ùå Cache miss for ${fileName} (not found in DB)`)
          resolve(null)
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (fileHash && result.fileHash !== fileHash) {
          console.log(`[YFTCache] üóëÔ∏è Cache invalid for ${fileName} (hash mismatch: expected ${fileHash}, got ${result.fileHash})`)
          resolve(null)
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
        const age = Date.now() - result.cachedAt
        if (age > this.maxCacheAge) {
          console.log(`[YFTCache] üóëÔ∏è Cache expired for ${fileName} (age: ${Math.round(age / 1000 / 60 / 60)}h)`)
          resolve(null)
          return
        }

        console.log(`[YFTCache] ‚úÖ Cache hit for ${fileName} (size: ${YFTCache.formatSize(result.fileSize)}, age: ${YFTCache.formatTime(result.cachedAt)})`)
        resolve(result)
      }
    })
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
   */
  async set(data: CachedYFTData): Promise<void> {
    if (!this.db) await this.init()
    if (!this.db) throw new Error('IndexedDB not available')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.cleanupIfNeeded()

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readwrite')
      const store = transaction.objectStore(this.storeName)
      const request = store.put(data)

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        console.log(`[YFTCache] üíæ Cached ${data.fileName} (${Math.round(data.fileSize / 1024)}KB)`)
        resolve()
      }
    })
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
   */
  async delete(fileName: string): Promise<void> {
    if (!this.db) await this.init()
    if (!this.db) return

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readwrite')
      const store = transaction.objectStore(this.storeName)
      const request = store.delete(fileName)

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        console.log(`[YFTCache] üóëÔ∏è Deleted cache for ${fileName}`)
        resolve()
      }
    })
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
   */
  async clear(): Promise<void> {
    if (!this.db) await this.init()
    if (!this.db) return

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readwrite')
      const store = transaction.objectStore(this.storeName)
      const request = store.clear()

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        console.log(`[YFTCache] üßπ Cleared all cache`)
        resolve()
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  async getStats(): Promise<CacheStats> {
    if (!this.db) await this.init()
    if (!this.db) return { totalItems: 0, totalSize: 0, oldestCache: null, newestCache: null }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readonly')
      const store = transaction.objectStore(this.storeName)
      const request = store.getAll()

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        const items = request.result as CachedYFTData[]
        
        const stats: CacheStats = {
          totalItems: items.length,
          totalSize: items.reduce((sum, item) => sum + item.fileSize, 0),
          oldestCache: items.length > 0 ? Math.min(...items.map(item => item.cachedAt)) : null,
          newestCache: items.length > 0 ? Math.max(...items.map(item => item.cachedAt)) : null
        }

        resolve(stats)
      }
    })
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –µ—Å–ª–∏ –∫—ç—à –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
   */
  private async cleanupIfNeeded(): Promise<void> {
    const stats = await this.getStats()
    
    if (stats.totalSize <= this.maxCacheSize) return

    console.log(`[YFTCache] üßπ Cache size ${Math.round(stats.totalSize / 1024 / 1024)}MB exceeds limit, cleaning up...`)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const allItems = await this.getAllItemsSortedByDate()
    
    let currentSize = stats.totalSize
    const itemsToDelete: string[] = []

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞
    for (const item of allItems) {
      if (currentSize <= this.maxCacheSize * 0.8) break // –û—Å—Ç–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å–∞
      
      itemsToDelete.push(item.fileName)
      currentSize -= item.fileSize
    }

    // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    for (const fileName of itemsToDelete) {
      await this.delete(fileName)
    }

    console.log(`[YFTCache] üßπ Cleaned up ${itemsToDelete.length} old cache entries`)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
   */
  private async getAllItemsSortedByDate(): Promise<CachedYFTData[]> {
    if (!this.db) return []

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([this.storeName], 'readonly')
      const store = transaction.objectStore(this.storeName)
      const index = store.index('cachedAt')
      const request = index.getAll()

      request.onerror = () => reject(request.error)
      request.onsuccess = () => {
        const items = request.result as CachedYFTData[]
        items.sort((a, b) => a.cachedAt - b.cachedAt) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        resolve(items)
      }
    })
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   * –í–ê–ñ–ù–û: –•—ç—à –æ—Å–Ω–æ–≤–∞–Ω –¢–û–õ–¨–ö–û –Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   */
  static async createFileHash(fileName: string, _fileSize?: number, _lastModified?: number): Promise<string> {
    // –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–û–õ–¨–ö–û –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
    // _fileSize –∏ _lastModified –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è YFT —Ñ–∞–π–ª–æ–≤, —Ç.–∫. –æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
    const data = `${fileName}`
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Crypto API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof crypto !== 'undefined' && crypto.subtle) {
      const encoder = new TextEncoder()
      const dataBuffer = encoder.encode(data)
      const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)
      const hashArray = Array.from(new Uint8Array(hashBuffer))
      return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
    }
    
    // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à
    let hash = 0
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i)
      hash = ((hash << 5) - hash) + char
      hash = hash & hash // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return hash.toString(16)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  static formatSize(bytes: number): string {
    const sizes = ['B', 'KB', 'MB', 'GB']
    if (bytes === 0) return '0 B'
    const i = Math.floor(Math.log(bytes) / Math.log(1024))
    return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  static formatTime(timestamp: number): string {
    const now = Date.now()
    const diff = now - timestamp
    
    if (diff < 60000) return `${Math.round(diff / 1000)}s ago`
    if (diff < 3600000) return `${Math.round(diff / 60000)}m ago`
    if (diff < 86400000) return `${Math.round(diff / 3600000)}h ago`
    return `${Math.round(diff / 86400000)}d ago`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const yftCache = new YFTCache()
