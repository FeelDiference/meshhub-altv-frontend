// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
import React, { useState, useEffect, useCallback } from 'react'
import { Car, Loader2, AlertCircle, Download, Play, RotateCcw, Search, X, Cloud, Gamepad2, HardDrive, Star } from 'lucide-react'
import toast from 'react-hot-toast'
import TuningSliders from '@/components/vehicles/TuningSliders'
import HandlingMetaEditor from '@/components/vehicles/HandlingMetaEditor'
import VehicleActions from '@/components/vehicles/VehicleActions'
import YftViewer from '@/components/vehicles/YftViewer'
import Portal from '@/components/common/Portal'
import { fetchHandlingMeta } from '@/services/rpf'
import { updateXmlNumericValue, paramToXmlTag } from '@/utils/updateXml'
import { useALTV } from '@/hooks/useALTV'
import { useFavorites } from '@/hooks/useFavorites'
import { Button } from '@/components/common/Button'
import { getVehicles } from '@/services/vehicles'
import type { AnyVehicle } from '@/types/vehicle'
import type { VehicleResource } from '@/types/vehicle'
import { downloadVehicleWithStatus, reloadVehicle, type VehicleStatus } from '@/services/vehicleManager'
import { getAccessToken } from '@/services/auth'
import { getGTAVVehicles, getGTAVCategories, type GTAVVehicle } from '@/data/gtav-vehicles-with-categories'

export const VehiclesPage = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [localEdits, setLocalEdits] = useState<string[]>([])
  const [restartRequired, setRestartRequired] = useState<string[]>([])
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–£–Æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const { toggle, has } = useFavorites()

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
  const toggleFavorite = useCallback(async (vehicleName: string) => {
    console.log(`[VehiclesPage] Toggling favorite for vehicle: ${vehicleName}`)
    await toggle('vehicle', vehicleName)
  }, [toggle])

  const isFavorite = useCallback((vehicleName: string) => {
    return has('vehicle', vehicleName)
  }, [has])
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è
  useEffect(() => {
    const handleLocalEditsUpdate = (data: any) => {
      console.log('[App] üì® Received local-edits-update:', data)
      console.log('[App] localEdits array:', data.localEdits)
      console.log('[App] restartRequired array:', data.restartRequired)
      setLocalEdits(data.localEdits || [])
      setRestartRequired(data.restartRequired || [])
      console.log('[App] ‚úÖ State updated')
    }
    
    // –í ALT:V WebView –∏—Å–ø–æ–ª—å–∑—É–µ–º alt.on –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    if (typeof window !== 'undefined' && (window as any).alt) {
      console.log('[App] üéß Subscribing to local-edits-update event')
      ;(window as any).alt.on('local-edits-update', handleLocalEditsUpdate)
      console.log('[App] ‚úÖ Event handler registered')
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
      const handlePanelOpened = () => {
        console.log('[App] üì§ Panel opened, requesting local edits')
        ;(window as any).alt.emit('request-local-edits')
      }
      
      ;(window as any).alt.on('altv:panel:opened', handlePanelOpened)
      console.log('[App] ‚úÖ Panel opened handler registered for altv:panel:opened')
      
      return () => {
        console.log('[App] üßπ Cleaning up event handlers')
        ;(window as any).alt.off?.('local-edits-update', handleLocalEditsUpdate)
        ;(window as any).alt.off?.('altv:panel:opened', handlePanelOpened)
      }
    } else {
      console.log('[App] ‚ö†Ô∏è alt not available for local-edits-update subscription')
    }
  }, [])
  
  const { spawnVehicle, destroyVehicle, currentVehicle, isAvailable, updateHandling, resetHandling, requestHandlingMeta } = useALTV({
    onVehicleSpawned: (data) => {
      toast.success(`${data.modelName} –∑–∞—Å–ø–∞–≤–Ω–µ–Ω`)
    },
    onVehicleDestroyed: () => {
      toast('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª—ë–Ω', { icon: 'üóëÔ∏è' })
    },
    onPlayerEnteredVehicle: (data) => {
      console.log('[VehiclesPage] üöó Player entered vehicle:', data.modelName)
      console.log('[VehiclesPage] üîç Searching for vehicle in lists...')
      
      // –ò—â–µ–º –º–∞—à–∏–Ω—É –≤ —Å–ø–∏—Å–∫–∞—Ö (GTAV –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
      let vehicle: AnyVehicle | null = null
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ GTAV
      console.log('[VehiclesPage] üîç Searching in GTAV vehicles:', gtavVehicles.length)
      const gtavVehicle = gtavVehicles.find(v => v.name.toLowerCase() === data.modelName.toLowerCase())
      if (gtavVehicle) {
        console.log('[VehiclesPage] ‚úÖ Found in GTAV list:', gtavVehicle.name)
        vehicle = {
          ...gtavVehicle,
          id: gtavVehicle.name,
          modelName: gtavVehicle.name,
          isGTAV: true as const
        }
      } else {
        console.log('[VehiclesPage] üîç Not found in GTAV, searching in custom vehicles:', vehicles.length)
        // –ò—â–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö
        vehicle = vehicles.find(v => v.name.toLowerCase() === data.modelName.toLowerCase()) || null
        if (vehicle) {
          console.log('[VehiclesPage] ‚úÖ Found in custom vehicles:', vehicle.name)
        } else {
          console.log('[VehiclesPage] ‚ùå Not found in custom vehicles')
        }
      }
      
      if (vehicle) {
        console.log('[VehiclesPage] ‚úÖ Found vehicle, setting as selected:', vehicle.name)
        setSelectedVehicle(vehicle)
        setShowTuning(true)
        setShowMeta(true)
        setShowActions(true)
        setPanelsVisible(true)
        // –ù–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
      } else {
        console.warn('[VehiclesPage] ‚ùå Vehicle not found in lists:', data.modelName)
      }
    },
    onHandlingMetaReceived: (data) => {
      console.log('[VehiclesPage] Received handling meta from server:', data.modelName)
      console.log('[VehiclesPage] XML length:', data.xml?.length)
      console.log('[VehiclesPage] XML preview (first 200 chars):', data.xml?.substring(0, 200))
      console.log('[VehiclesPage] XML preview (last 200 chars):', data.xml?.substring(data.xml.length - 200))
      setHandlingMetaXml(data.xml)
      currentXmlVehicleName.current = data.modelName
      vehicleXmlCache.current.set(data.modelName, data.xml)
      toast.success(`Handling –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è ${data.modelName}`)
    },
    onLocalVehiclesReceived: (vehicles) => {
      console.log('[VehiclesPage] Local vehicles received:', vehicles.length)
      setLocalVehicles(vehicles)
    }
  })
  // UI state for side panels
  const [selectedVehicle, setSelectedVehicle] = useState<AnyVehicle | null>(null)
  const [handlingMetaXml, setHandlingMetaXml] = useState<string>('')
  const [highlightedXmlParam, setHighlightedXmlParam] = useState<string>('')
  const [showTuning, setShowTuning] = useState(false)
  const [showMeta, setShowMeta] = useState(false)
  const [showActions, setShowActions] = useState(false)
  const [focusMode, setFocusMode] = useState<'off' | 'tuning' | 'actions'>('off') // –†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞: –≤—ã–∫–ª / –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã / –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
  const [userManuallyCollapsed, setUserManuallyCollapsed] = useState(false) // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
  const [showYftViewer, setShowYftViewer] = useState(false) // YFT 3D Viewer –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
  const [yftGameViewActive, setYftGameViewActive] = useState(false) // YFT Viewer –≤ —Ä–µ–∂–∏–º–µ Game View
  const [panelsVisible, setPanelsVisible] = useState<boolean>(false)
  const [activeModel] = useState<string>('')
  const headerRef = React.useRef<HTMLDivElement>(null) // Ref –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–µ–π
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ—Ç–æ–≤ handling
  const [currentHandlingValues, setCurrentHandlingValues] = useState<Record<string, number>>({})
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–¥–≤–∏–≥ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è: —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é + –æ—Ç—Å—Ç—É–ø
  // 15.6vw (–º–µ–Ω—é) + 24px (–æ—Ç—Å—Ç—É–ø)
  const panelLeft = 'calc(15.6vw + 24px)'
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è Game View –≤ App
  useEffect(() => {
    console.log('[Dashboard] üì° Dispatching game view change:', yftGameViewActive)
    const event = new CustomEvent('yft-game-view-changed', { detail: { active: yftGameViewActive } })
    window.dispatchEvent(event)
  }, [yftGameViewActive])
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —à–∏—Ä–∏–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
  useEffect(() => {
    if (!headerRef.current || !panelsVisible) return
    
    const updateHeaderWidth = () => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –ø–∞–Ω–µ–ª–∏
      const panels = document.querySelectorAll('[data-panel-type]')
      if (panels.length === 0) return
      
      let totalWidth = 0
      panels.forEach((panel) => {
        totalWidth += panel.getBoundingClientRect().width
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏ (12px –∫–∞–∂–¥—ã–π)
      const gaps = (panels.length - 1) * 12
      totalWidth += gaps
      
      if (headerRef.current) {
        headerRef.current.style.width = `${totalWidth}px`
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π
    const timeout = setTimeout(updateHeaderWidth, 100)
    window.addEventListener('resize', updateHeaderWidth)
    
    return () => {
      clearTimeout(timeout)
      window.removeEventListener('resize', updateHeaderWidth)
    }
  }, [panelsVisible, showTuning, showMeta, showActions, selectedVehicle])
  const [pendingModelToSelect, setPendingModelToSelect] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState<string>('')
  const [activeTab, setActiveTab] = useState<'hub' | 'gtav' | 'local'>('hub')
  const [selectedCategory, setSelectedCategory] = useState<string>('All')
  
  // GTAV –º–∞—à–∏–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
  const [gtavVehicles] = useState<GTAVVehicle[]>(() => getGTAVVehicles())
  const [gtavCategories] = useState<string[]>(() => ['All', ...getGTAVCategories()])
  
  // Local –º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [localVehicles, setLocalVehicles] = useState<AnyVehicle[]>([])
  
  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  const [initialVehicleCheckDone, setInitialVehicleCheckDone] = useState(false)
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
  const loadLocalVehicles = useCallback(async () => {
    if (activeTab !== 'local') return
    
    try {
      console.log('[VehiclesPage] Loading local vehicles...')
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞
      // Local –º–∞—à–∏–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ onInstalled
      if (typeof window !== 'undefined' && 'alt' in window) {
        ;(window as any).alt.emit('vehicle:installed:list:request')
      }
    } catch (error) {
      console.error('[VehiclesPage] Error loading local vehicles:', error)
    }
  }, [activeTab])

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å XML —Ä–µ–¥–∞–∫—Ç–æ—Ä
  const shouldShowXmlEditor = useCallback((vehicle: AnyVehicle): boolean => {
    // –î–ª—è GTAV –º–∞—à–∏–Ω - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º XML (–µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ handling.meta)
    if ('isGTAV' in vehicle && vehicle.isGTAV) {
      return true
    }
    
    // –î–ª—è HUB –º–∞—à–∏–Ω - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º XML
    if (activeTab === 'hub') {
      return true
    }
    
    // –î–ª—è LOCAL –º–∞—à–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º XML (–µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ handling.meta)
    if ('isLocal' in vehicle && vehicle.isLocal) {
      return true
    }
    
    // –î–ª—è LOCAL –º–∞—à–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è streaming —Ä–µ—Å—É—Ä—Å–æ–≤
    if (activeTab === 'local' && vehicle) {
      // –ï—Å–ª–∏ —É –º–∞—à–∏–Ω—ã –µ—Å—Ç—å —Ñ–ª–∞–≥ isStreaming, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if ('isStreaming' in vehicle) {
        return vehicle.isStreaming === true
      }
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è LOCAL –º–∞—à–∏–Ω —Å—á–∏—Ç–∞–µ–º streaming
      return true
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    return true
  }, [activeTab])
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ handling –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞, –≤—ã–∑—ã–≤–∞—è updateHandling –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
  const handlePresetLoad = useCallback((preset: Record<string, number>) => {
    console.log('[VehiclesPage] Loading preset with', Object.keys(preset).length, 'parameters')
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞
    Object.entries(preset).forEach(([param, value]) => {
      updateHandling(param, value)
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º XML –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      const tag = paramToXmlTag[param]
      if (tag) {
        setHandlingMetaXml(prev => updateXmlNumericValue(prev, tag, value))
      }
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    setCurrentHandlingValues(preset)
    
    toast.success('–ü—Ä–µ—Å–µ—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω')
  }, [updateHandling]) // –¢–æ–ª—å–∫–æ updateHandling, handlingMetaXml —É–±—Ä–∞–ª –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  
  // Callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ TuningSliders
  // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  const handleValuesChange = useCallback((values: Record<string, number>) => {
    setCurrentHandlingValues(values)
  }, []) // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º GTAV –º–∞—à–∏–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('[VehiclesPage] üîç Checking Alt:V availability...')
    console.log('[VehiclesPage] typeof window:', typeof window)
    console.log('[VehiclesPage] alt in window:', 'alt' in window)
    console.log('[VehiclesPage] gtavVehicles.length:', gtavVehicles.length)
    
    if (typeof window !== 'undefined' && 'alt' in window && gtavVehicles.length > 0) {
      try {
        const gtavList = gtavVehicles.map(v => ({
          name: v.name,
          modelName: v.name,
          displayName: v.displayName,
          category: 'gtav'
        }))
        
        console.log('[VehiclesPage] üöó Sending GTAV sync to Alt:V...')
        ;(window as any).alt.emit('vehicles:list:sync', gtavList)
        console.log('[VehiclesPage] ‚úÖ Initial GTAV sync sent:', gtavList.length, 'vehicles')
      } catch (e) {
        console.warn('[VehiclesPage] Failed initial GTAV sync:', e)
      }
    } else {
      console.warn('[VehiclesPage] ‚ö†Ô∏è  Cannot sync GTAV vehicles - not in Alt:V or no vehicles')
    }
  }, [gtavVehicles])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ Local –≤–∫–ª–∞–¥–∫—É
  useEffect(() => {
    if (activeTab === 'local') {
      loadLocalVehicles()
    }
  }, [activeTab, loadLocalVehicles])

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö XML –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã (–∫–ª—é—á = vehicle.name)
  const vehicleXmlCache = React.useRef<Map<string, string>>(new Map())
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫–æ–π –º–∞—à–∏–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–∏–π XML
  const currentXmlVehicleName = React.useRef<string | null>(null)

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è XML –≤ –∫—ç—à –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    if (selectedVehicle && handlingMetaXml && currentXmlVehicleName.current === selectedVehicle.name) {
      console.log('[VehiclesPage] Updating XML cache for', selectedVehicle.name)
      vehicleXmlCache.current.set(selectedVehicle.name, handlingMetaXml)
    }
  }, [handlingMetaXml, selectedVehicle])

  // When vehicle selected or entered, show panels and request handling meta
  useEffect(() => {
    if (!selectedVehicle) return
    setShowTuning(true)
    setShowMeta(true)
    setShowActions(true)
    setPanelsVisible(true)
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    setUserManuallyCollapsed(false)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π XML –≤ –∫—ç—à–µ
    const cachedXml = vehicleXmlCache.current.get(selectedVehicle.name)
    if (cachedXml) {
      console.log('[VehiclesPage] Loading XML from cache for', selectedVehicle.name)
      setHandlingMetaXml(cachedXml)
      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π XML –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –º–∞—à–∏–Ω–µ
      currentXmlVehicleName.current = selectedVehicle.name
      return
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—à–∏–Ω—ã
    const vehicleCategory: 'gtav' | 'local' | 'meshhub' = 
      'isGTAV' in selectedVehicle && selectedVehicle.isGTAV ? 'gtav' :
      'isLocal' in selectedVehicle && selectedVehicle.isLocal ? 'local' :
      'category' in selectedVehicle && (selectedVehicle.category === 'local' || selectedVehicle.category === 'meshhub' || selectedVehicle.category === 'gtav') ? selectedVehicle.category :
      'meshhub'

    // –î–ª—è GTAV –º–∞—à–∏–Ω - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Alt:V (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    if (vehicleCategory === 'gtav' && isAvailable) {
      console.log('[VehiclesPage] Requesting GTAV handling for', selectedVehicle.name)
      requestHandlingMeta(selectedVehicle.name, 'gtav')
      return
    }

    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Alt:V (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    if (vehicleCategory === 'local' && isAvailable) {
      console.log('[VehiclesPage] Requesting LOCAL handling for', selectedVehicle.name)
      requestHandlingMeta(selectedVehicle.name, 'local')
      return
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π handling.meta —Å –±—ç–∫–∞
    console.log('[VehiclesPage] Fetching fresh XML for', selectedVehicle.name)
    fetchHandlingMeta(selectedVehicle.name)
      .then(xml => {
        setHandlingMetaXml(xml)
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π XML –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –º–∞—à–∏–Ω–µ
        currentXmlVehicleName.current = selectedVehicle.name
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        vehicleXmlCache.current.set(selectedVehicle.name, xml)
      })
      .catch(() => {
        // fallback —á–µ—Ä–µ–∑ ALT (–µ—Å–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω) –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ
        if (typeof window !== 'undefined' && 'alt' in window) {
          requestHandlingMeta(selectedVehicle.modelName || selectedVehicle.name, vehicleCategory)
        }
      })
  }, [selectedVehicle, requestHandlingMeta, isAvailable])

  // Listen for handling.meta response
  useEffect(() => {
    if (!(typeof window !== 'undefined' && 'alt' in window)) return
    
    const onMeta = (data: { modelName: string; xml: string }) => {
      console.log('[VehiclesPage] onMeta: Received XML for', data.modelName)
      setHandlingMetaXml(data.xml || '')
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à - –∏—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ selectedVehicle
      setSelectedVehicle(current => {
        if (current && data.modelName === (current.modelName || current.name)) {
          currentXmlVehicleName.current = current.name
          vehicleXmlCache.current.set(current.name, data.xml || '')
        }
        return current
      })
    }
    
    const onPanelOpened = () => {
      console.log('[VehiclesPage] Panel opened via F10 - checking auto-expand logic')
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–ª –ø–∞–Ω–µ–ª–∏ –≤—Ä—É—á–Ω—É—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
      if (!userManuallyCollapsed) {
        console.log('[VehiclesPage] Auto-expanding panels (user never manually collapsed)')
        setShowTuning(true)
        setShowMeta(true)
        setShowActions(true)
        setPanelsVisible(true)
      } else {
        console.log('[VehiclesPage] User manually collapsed panels before - not auto-expanding')
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º handling.meta –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
      if (currentVehicle && isAvailable) {
        console.log('[VehiclesPage] üîÑ Panel opened - forcing handling.meta reload for', currentVehicle.modelName)
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–∞–Ω–µ–ª—å —É—Å–ø–µ–ª–∞ –æ—Ç–∫—Ä—ã—Ç—å—Å—è
        setTimeout(() => {
          requestHandlingMeta(currentVehicle.modelName, 'gtav')
        }, 100)
      }
    }
    const onPanelClosed = () => {
      console.log('[VehiclesPage] Panel closed - resetting manual collapse flag')
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
      setUserManuallyCollapsed(false)
    }
    
    ;(window as any).alt.on('handling:meta:response', onMeta)
    ;(window as any).alt.on('altv:panel:opened', onPanelOpened)
    ;(window as any).alt.on('altv:panel:closed', onPanelClosed)
    
    return () => {
      (window as any).alt.off?.('handling:meta:response', onMeta)
      ;(window as any).alt.off?.('altv:panel:opened', onPanelOpened)
      ;(window as any).alt.off?.('altv:panel:closed', onPanelClosed)
    }
  }, [currentVehicle])
  
  console.log('[VehiclesPage] useALTV isAvailable:', isAvailable)

  const [vehicles, setVehicles] = useState<VehicleResource[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [vehicleStatuses, setVehicleStatuses] = useState<Map<string, VehicleStatus>>(new Map())
  const [pendingRestartIds, setPendingRestartIds] = useState<Set<string>>(new Set())

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –º–∞—à–∏–Ω–µ
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    if (initialVehicleCheckDone) return
    if (!currentVehicle || !currentVehicle.modelName) return
    
    // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è —Å–ø–∏—Å–∫–∏ (—Ö–æ—Ç—è –±—ã GTAV –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å)
    if (gtavVehicles.length === 0) return
    
    // –í–ê–ñ–ù–û: –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è HUB —Å–ø–∏—Å–æ–∫, –∏–Ω–∞—á–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ–ø–∞–¥—É—Ç –≤ LOCAL!
    if (loading) {
      console.log('[VehiclesPage] ‚è≥ Waiting for HUB vehicles to load before auto-detection...')
      return
    }
    
    console.log('[VehiclesPage] üîç Initial check - player is in vehicle:', currentVehicle.modelName)
    console.log('[VehiclesPage] üìä Available lists: GTAV=' + gtavVehicles.length + ', HUB=' + vehicles.length + ', LOCAL=' + localVehicles.length)
    
    // –ò—â–µ–º –º–∞—à–∏–Ω—É –≤ GTAV —Å–ø–∏—Å–∫–µ
    console.log('[VehiclesPage] üîç Step 1: Checking GTAV list...')
    const gtavVehicle = gtavVehicles.find(v => v.name.toLowerCase() === currentVehicle.modelName.toLowerCase())
    
    if (gtavVehicle) {
      // –≠—Ç–æ –≤–∞–Ω–∏–ª—å–Ω–∞—è GTA V –º–∞—à–∏–Ω–∞
      console.log('[VehiclesPage] ‚úÖ FOUND in GTAV! Switching to GTAV tab')
      setActiveTab('gtav')
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –º–∞—à–∏–Ω—É
      const vehicleData = {
        ...gtavVehicle,
        id: gtavVehicle.name,
        modelName: gtavVehicle.name,
        isGTAV: true as const
      }
      setSelectedVehicle(vehicleData)
      setShowTuning(true)
      setShowMeta(true)
      setShowActions(true)
      setPanelsVisible(true)
      
      console.log('[VehiclesPage] üéØ GTAV vehicle auto-selected:', gtavVehicle.name)
      setInitialVehicleCheckDone(true)
    } else {
      // –ò—â–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö (HUB –∏–ª–∏ LOCAL)
      console.log('[VehiclesPage] ‚ùå Not in GTAV. Step 2: Checking HUB list...')
      const customVehicle = vehicles.find(v => v.name.toLowerCase() === currentVehicle.modelName.toLowerCase())
      
      if (customVehicle) {
        // –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–∞—à–∏–Ω–∞ –∏–∑ HUB
        console.log('[VehiclesPage] ‚úÖ FOUND in HUB! Switching to HUB tab')
        setActiveTab('hub')
        setSelectedVehicle(customVehicle)
        setShowTuning(true)
        setShowMeta(true)
        setShowActions(true)
        setPanelsVisible(true)
        
        console.log('[VehiclesPage] üéØ HUB vehicle auto-selected:', customVehicle.name)
        setInitialVehicleCheckDone(true)
      } else {
        // –ò—â–µ–º –≤ LOCAL –º–∞—à–∏–Ω–∞—Ö
        console.log('[VehiclesPage] ‚ùå Not in HUB. Step 3: Checking LOCAL list...')
        const localVehicle = localVehicles.find(v => v.name.toLowerCase() === currentVehicle.modelName.toLowerCase())
        
        if (localVehicle) {
          // –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞
          console.log('[VehiclesPage] ‚úÖ FOUND in LOCAL! Switching to LOCAL tab')
          setActiveTab('local')
          setSelectedVehicle(localVehicle)
          setShowTuning(true)
          setShowMeta(true)
          setShowActions(true)
          setPanelsVisible(true)
          
          console.log('[VehiclesPage] üéØ LOCAL vehicle auto-selected:', localVehicle.name)
          setInitialVehicleCheckDone(true)
        } else {
          // –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
          console.log('[VehiclesPage] ‚ùå Not in LOCAL. Step 4: Creating unknown vehicle entry...')
          console.log('[VehiclesPage] ‚ö†Ô∏è Unknown vehicle:', currentVehicle.modelName, '- will be shown in LOCAL tab')
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –º–∞—à–∏–Ω—ã
          const unknownVehicle = {
            id: `unknown_${currentVehicle.modelName}`,
            name: currentVehicle.modelName,
            displayName: currentVehicle.modelName,
            modelName: currentVehicle.modelName,
            category: 'local',
            tags: [],
            size: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            metadata: null,
            isLocal: true
          }
          
          setActiveTab('local')
          setSelectedVehicle(unknownVehicle)
          setShowTuning(true)
          setShowMeta(true)
          setShowActions(true)
          setPanelsVisible(true)
          
          console.log('[VehiclesPage] üéØ Unknown vehicle auto-selected:', currentVehicle.modelName)
          setInitialVehicleCheckDone(true)
        }
      }
    }
  }, [currentVehicle, gtavVehicles, vehicles, localVehicles, initialVehicleCheckDone, loading]) // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å backend
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º HUB –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ HUB
    // GTAV –∏ LOCAL –≤–∫–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –±–µ–∑ backend
    if (activeTab !== 'hub') {
      setLoading(false)
      setError(null)
      return
    }
    
    const loadVehicles = async () => {
      try {
        setLoading(true)
        setError(null)
        const vehiclesList = await getVehicles()
        setVehicles(vehiclesList)
        
        // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (Alt:V)
        if (typeof window !== 'undefined' && 'alt' in window) {
          try {
            // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            ;(window as any).alt.emit('vehicle:installed:list:request')
          } catch (e) {
            console.warn('[Installed] Request failed:', e)
          }
        }
        
        // –í –±—Ä–∞—É–∑–µ—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–∫ –Ω–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ
        const statusMap = new Map<string, VehicleStatus>()
        for (const vehicle of vehiclesList) {
          statusMap.set(vehicle.id, 'not_downloaded')
        }
        setVehicleStatuses(statusMap)
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï –º–∞—à–∏–Ω—ã (–∫–∞—Å—Ç–æ–º–Ω—ã–µ + GTAV) —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–∞
        if (typeof window !== 'undefined' && 'alt' in window) {
          try {
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å GTAV
            const gtavList = gtavVehicles.map(v => ({
              name: v.name,
              modelName: v.name,
              displayName: v.displayName,
              category: 'gtav'
            }))
            
            const allVehicles = [...vehiclesList, ...gtavList]
            console.log('[VehiclesPage] üöó Syncing vehicles with client:')
            console.log('[VehiclesPage] üìä Custom vehicles:', vehiclesList.length)
            console.log('[VehiclesPage] üìä GTAV vehicles:', gtavList.length)
            console.log('[VehiclesPage] üìä Total vehicles:', allVehicles.length)
            console.log('[VehiclesPage] üìã First 5 GTAV vehicles:', gtavList.slice(0, 5).map(v => v.name))
            
            // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GTAV –º–∞—à–∏–Ω—ã –¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–µ—Ç
            if (gtavList.length > 0) {
              ;(window as any).alt.emit('vehicles:list:sync', allVehicles)
              console.log('[VehiclesPage] ‚úÖ Synced all vehicles with client:', allVehicles.length)
            } else {
              console.warn('[VehiclesPage] ‚ö†Ô∏è  No GTAV vehicles to sync!')
            }
          } catch (e) {
            console.warn('[VehiclesPage] Failed to sync vehicles:', e)
          }
        }
        
      } catch (err: any) {
        setError('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. GTAV –∏ LOCAL –≤–∫–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.')
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', err)
        toast.error('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      } finally {
        setLoading(false)
      }
    }
    
    loadVehicles()
  }, [gtavVehicles, activeTab])

  // –î–æ–∂–∏–º–∞–µ–º –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—à–ª–æ —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Å–ø–∏—Å–æ–∫
  useEffect(() => {
    if (!pendingModelToSelect) return
    const found = vehicles.find(v => (v.modelName || v.name) === pendingModelToSelect)
    if (found) {
      setSelectedVehicle(found)
      setPendingModelToSelect(null)
    }
  }, [vehicles, pendingModelToSelect])
  
  // –°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∏–ª –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞
  useEffect(() => {
    if (typeof window !== 'undefined' && 'alt' in window) {
      const handleDownloaded = (data: { success: boolean; vehicleId: string; vehicleName: string; message: string }) => {
        
        if (data.success) {
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É—é—â–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞
          setVehicleStatuses(prev => new Map(prev.set(data.vehicleId, 'downloaded')))
          setPendingRestartIds(prev => {
            const next = new Set(prev)
            next.add(data.vehicleId)
            return next
          })
          toast.success(`${data.vehicleName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞`, {
            duration: 5000,
          })
        } else {
          setVehicleStatuses(prev => new Map(prev.set(data.vehicleId, 'not_downloaded')))
          setPendingRestartIds(prev => {
            const next = new Set(prev)
            next.delete(data.vehicleId)
            return next
          })
          toast.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${data.vehicleName}:\n${data.message}`, {
            duration: 5000,
          })
        }
      }

      const handleHandlingSaved = (data: { success: boolean; fileName?: string; filePath?: string; downloadsPath?: string; error?: string; vehicleName?: string }) => {
        if (data.success) {
          toast.success(
            `‚úÖ Handling –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
            `üì¶ RPF –∞—Ä—Ö–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${data.vehicleName || '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'}\n` +
            `üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${data.fileName}\n` +
            `üìÅ –ü—É—Ç—å: ${data.downloadsPath}\n\n` +
            `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–≥—Ä–µ`,
            {
              duration: 10000,
              style: {
                maxWidth: '500px',
              }
            }
          )
        } else {
          toast.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${data.error}`, {
            duration: 5000,
          })
        }
      }

      const handleVehicleSpawned = (data: { vehicleId: number; modelName: string; position: any }) => {
        console.log('[VehiclesPage] Vehicle spawned successfully:', data.modelName)
        toast.success(`–ú–∞—à–∏–Ω–∞ ${data.modelName} —É—Å–ø–µ—à–Ω–æ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–∞!`, {
          duration: 3000,
        })
      }

      const handleVehicleSpawnError = (data: { modelName: string; error: string; details: string }) => {
        console.log('[VehiclesPage] Vehicle spawn error:', data.error)
        toast.error(`–û—à–∏–±–∫–∞ —Å–ø–∞–≤–Ω–∞ ${data.modelName}:\n${data.error}`, {
          duration: 5000,
        })
      }

      ;(window as any).alt.on('vehicle:downloaded', handleDownloaded)
      ;(window as any).alt.on('meshhub:vehicle:handling:saved', handleHandlingSaved)
      ;(window as any).alt.on('vehicle:spawned', handleVehicleSpawned)
      ;(window as any).alt.on('vehicle:spawn:error', handleVehicleSpawnError)
      return () => {
        (window as any).alt.off?.('vehicle:downloaded', handleDownloaded)
        ;(window as any).alt.off?.('meshhub:vehicle:handling:saved', handleHandlingSaved)
        ;(window as any).alt.off?.('vehicle:spawned', handleVehicleSpawned)
        ;(window as any).alt.off?.('vehicle:spawn:error', handleVehicleSpawnError)
      }
    }
  }, [])

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
  useEffect(() => {
    if (!(typeof window !== 'undefined' && 'alt' in window)) return
    
    const onInstalled = (installedNames: string[]) => {
      console.log('[VehiclesPage] Received installed vehicles from server:', installedNames?.length)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ vehicles
      setVehicles(currentVehicles => {
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
        setVehicleStatuses(prev => {
          const m = new Map(prev)
          for (const v of currentVehicles) {
            if (installedNames?.includes(v.name)) {
              m.set(v.id, 'downloaded')
            }
          }
          return m
        })
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
        setPendingRestartIds(prev => {
          const next = new Set(prev)
          for (const v of currentVehicles) {
            if (installedNames?.includes(v.name)) next.delete(v.id)
          }
          return next
        })
        
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ LOCAL –º–∞—à–∏–Ω
        // Local = –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ HUB –∏ –ù–ï–¢ –≤ GTAV
        const hubVehicleNames = new Set(currentVehicles.map(v => v.name.toLowerCase()))
        const gtavVehicleNames = new Set(gtavVehicles.map(v => v.name.toLowerCase()))
        const localOnly = installedNames
          ?.filter(name => 
            !hubVehicleNames.has(name.toLowerCase()) && 
            !gtavVehicleNames.has(name.toLowerCase())
          )
          .map(name => ({
            id: `local_${name}`,
            name: name,
            displayName: name,
            modelName: name,
            category: 'local',
            tags: [],
            size: 0,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            metadata: null,
            isLocal: true
          })) || []
        
        console.log('[VehiclesPage] üîç Filtering installed vehicles:')
        console.log('[VehiclesPage] üìä Total installed:', installedNames?.length || 0)
        console.log('[VehiclesPage] üìä HUB vehicles:', currentVehicles.length)
        console.log('[VehiclesPage] üìä GTAV vehicles:', gtavVehicles.length)
        console.log('[VehiclesPage] üìä LOCAL only vehicles:', localOnly.length)
        console.log('[VehiclesPage] üíæ LOCAL vehicles:', localOnly.map(v => v.name).join(', ') || 'none')
        setLocalVehicles(localOnly)
        
        return currentVehicles // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      })
    }
    
    ;(window as any).alt.on('vehicle:installed:list:response', onInstalled)
    return () => (window as any).alt.off?.('vehicle:installed:list:response', onInstalled)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω (–£–°–¢–ê–†–ï–õ - —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ onInstalled)
  // –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
  useEffect(() => {
    const onLocalVehicles = (vehicles: any[]) => {
      console.log('[VehiclesPage] Local vehicles received from server (legacy event):', vehicles.length)
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ onInstalled
    }
    
    if ('alt' in window) {
      ;(window as any).alt.on('meshhub:vehicle:local:list:response', onLocalVehicles)
      return () => (window as any).alt.off?.('meshhub:vehicle:local:list:response', onLocalVehicles)
    }
  }, [])

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const getCurrentVehicles = (): AnyVehicle[] => {
    switch (activeTab) {
      case 'hub':
        return vehicles
      case 'gtav':
        const filteredGTAV = selectedCategory === 'All' 
          ? gtavVehicles 
          : gtavVehicles.filter(v => v.category === selectedCategory)
        
        return filteredGTAV.map(v => ({
          ...v,
          id: v.name,
          modelName: v.name,
          isGTAV: true as const
        }))
      case 'local':
        return localVehicles
      default:
        return vehicles
    }
  }

         // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω –ø–æ –ø–æ–∏—Å–∫—É
         const currentVehicles = getCurrentVehicles()
         const filteredVehicles = currentVehicles
           .filter(v => {
             if (!searchQuery.trim()) return true
             const q = searchQuery.toLowerCase()
             return (
               v.name?.toLowerCase().includes(q) ||
               v.displayName?.toLowerCase().includes(q) ||
               v.modelName?.toLowerCase().includes(q)
             )
           })
           .sort((a, b) => {
             // –î–ª—è HUB –º–∞—à–∏–Ω - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É
             if (activeTab === 'hub') {
               const aInstalled = vehicleStatuses.get(a.id) === 'downloaded'
               const bInstalled = vehicleStatuses.get(b.id) === 'downloaded'
               
               if (aInstalled && !bInstalled) return -1
               if (!aInstalled && bInstalled) return 1
             }
             
             // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
             return (a.displayName || a.name).localeCompare(b.displayName || b.name)
           })

         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—à–∏–Ω—É
         const shouldShowSpawnSuggestion = searchQuery.trim() && 
           filteredVehicles.length === 0 && 
           searchQuery.length >= 3

         const handleSpawnSuggestion = () => {
           if (!searchQuery.trim()) return
           
           console.log(`[VehiclesPage] Spawning suggested vehicle: ${searchQuery}`)
           spawnVehicle(searchQuery)
           toast.success(`–ó–∞—Å–ø–∞–≤–Ω–µ–Ω–∞ –º–∞—à–∏–Ω–∞: ${searchQuery}`)
         }

  return (
    <div className="flex-1 p-4 sm:p-6 relative">
      <div className="mb-4 sm:mb-6">
        <h1 className="text-xl lg:text-2xl font-bold text-white mb-2">–ê–≤—Ç–æ–º–æ–±–∏–ª–∏</h1>
        <div className="flex items-center space-x-2 text-sm mb-4">
          <div className={`px-2 py-1 rounded-full text-xs ${
            isAvailable ? 'bg-green-900 text-green-300' : 'bg-orange-900 text-orange-300'
          }`}>
            {isAvailable ? 'üéÆ ALT:V' : 'üåê Browser'}
          </div>
          {currentVehicle && (
            <div className="px-2 py-1 bg-blue-900 text-blue-300 rounded-full text-xs">
              Current: {currentVehicle.modelName}
            </div>
          )}
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 mb-4">
          <button
            className={`w-full py-3 px-4 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center space-x-2 ${
              activeTab === 'hub' 
                ? 'bg-primary-600/50 text-white border border-primary-500/30' 
                : 'bg-base-800/50 text-gray-300 hover:bg-base-700/50 border border-base-700/30 hover:border-base-600/50'
            }`}
            onClick={() => setActiveTab('hub')}
          >
            <Cloud className="w-4 h-4" />
            <span>HUB</span>
          </button>
          <button
            className={`w-full py-3 px-4 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center space-x-2 ${
              activeTab === 'gtav' 
                ? 'bg-primary-600/50 text-white border border-primary-500/30' 
                : 'bg-base-800/50 text-gray-300 hover:bg-base-700/50 border border-base-700/30 hover:border-base-600/50'
            }`}
            onClick={() => setActiveTab('gtav')}
          >
            <Gamepad2 className="w-4 h-4" />
            <span>GTAV</span>
          </button>
          <button
            className={`w-full py-3 px-4 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center space-x-2 ${
              activeTab === 'local' 
                ? 'bg-primary-600/50 text-white border border-primary-500/30' 
                : 'bg-base-800/50 text-gray-300 hover:bg-base-700/50 border border-base-700/30 hover:border-base-600/50'
            }`}
            onClick={() => setActiveTab('local')}
          >
            <HardDrive className="w-4 h-4" />
            <span>Local</span>
          </button>
        </div>

        {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è GTAV */}
        {activeTab === 'gtav' && (
          <div className="mb-4">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full py-2.5 px-4 bg-base-800/50 border border-base-700 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:border-primary-500/50 transition-all"
            >
              {gtavCategories.map(category => (
                <option key={category} value={category}>
                  {category} ({category === 'All' ? gtavVehicles.length : gtavVehicles.filter(v => v.category === category).length})
                </option>
              ))}
            </select>
          </div>
        )}

        {/* –ü–æ–∏—Å–∫ */}
        <div className="space-y-2">
          <div className="relative">
            <div className="absolute left-3 top-1/2 -translate-y-1/2 pointer-events-none">
              <Search className="w-4 h-4 text-gray-500" />
            </div>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –º–æ–¥–µ–ª–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-10 py-2.5 bg-base-800/50 border border-base-700 rounded-lg text-white text-sm placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:border-primary-500/50 transition-all"
            />
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-300 transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>
                 {searchQuery && (
                   <div className="text-xs text-gray-500">
                     –ù–∞–π–¥–µ–Ω–æ: <span className="text-primary-400 font-medium">{filteredVehicles.length}</span> –∏–∑ {currentVehicles.length}
                   </div>
                 )}
                 
                 {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—à–∏–Ω—É */}
                 {shouldShowSpawnSuggestion && (
                   <div className="mt-3 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg">
                     <div className="flex items-center justify-between">
                       <div className="flex items-center space-x-3">
                         <div className="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center">
                           <Car className="w-4 h-4 text-blue-400" />
                         </div>
                         <div>
                           <p className="text-blue-300 text-sm font-medium">
                             –ú–∞—à–∏–Ω–∞ "{searchQuery}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
                           </p>
                           <p className="text-blue-400/70 text-xs">
                             –•–æ—Ç–∏—Ç–µ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—å –µ—ë –Ω–∞–ø—Ä—è–º—É—é?
                           </p>
                         </div>
                       </div>
                       <Button
                         onClick={handleSpawnSuggestion}
                         variant="primary"
                         size="sm"
                         className="flex items-center space-x-2"
                       >
                         <Play className="w-4 h-4" />
                         <span>–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å</span>
                       </Button>
                     </div>
                   </div>
                 )}
        </div>
      </div>

      {/* Vehicle Grid */}
      {loading && (
        <div className="flex items-center justify-center py-6 sm:py-8">
          <Loader2 className="w-6 h-6 animate-spin text-primary-400" />
          <span className="ml-2 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...</span>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-900/20 border border-red-500/30 rounded-lg">
          <div className="flex items-center space-x-2">
            <AlertCircle className="w-4 h-4 text-red-400" />
            <span className="text-red-400 text-sm">{error}</span>
          </div>
        </div>
      )}

      {!loading && !error && (
        <div className="grid grid-cols-1 gap-2 sm:gap-3 overflow-x-hidden">
          {filteredVehicles.length === 0 ? (
            <div className="p-8 text-center text-gray-500">
              {searchQuery ? `–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"` : '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
            </div>
          ) : (
            filteredVehicles.map((vehicle) => {
              const vehicleStatus = vehicleStatuses.get(vehicle.id) || 'not_downloaded'
              const isDownloaded = vehicleStatus === 'downloaded'
              const isChecking = vehicleStatus === 'checking'
              const isPendingRestart = pendingRestartIds.has(vehicle.id)
              
              const handleDownload = async () => {
                if ('isGTAV' in vehicle && vehicle.isGTAV) return // GTAV –º–∞—à–∏–Ω—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è
                try {
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'checking')))
                  const isAltV = typeof window !== 'undefined' && 'alt' in window
                  console.log(`[Download] Alt:V available: ${isAltV}`)
                  if (isAltV) {
                    const token = getAccessToken()
                    if (!token) {
                      console.error('[Download] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage')
                      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                    console.log(`[Download] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ server-side —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${vehicle.name}`)
                    console.log(`[Download] Vehicle ID: ${vehicle.id}`)
                    console.log(`[Download] Token: ${token.substring(0, 20)}...`)
                    ;(window as any).alt.emit('vehicle:download', {
                      vehicleId: vehicle.id,
                      vehicleName: vehicle.name,
                      token: token
                    })
                    console.log('[Download] –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...')
                  } else {
                    console.log('[Download] –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ blob')
                    await downloadVehicleWithStatus(vehicle as VehicleResource)
                  }
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'not_downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.delete(vehicle.id); return next })
                }
              }
              
              const handleReload = async () => {
                if ('isGTAV' in vehicle && vehicle.isGTAV) return // GTAV –º–∞—à–∏–Ω—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
                try {
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'checking')))
                  await reloadVehicle(vehicle as VehicleResource)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.add(vehicle.id); return next })
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error)
                  setVehicleStatuses(prev => new Map(prev.set(vehicle.id, 'not_downloaded')))
                  setPendingRestartIds(prev => { const next = new Set(prev); next.delete(vehicle.id); return next })
                }
              }
              
              const handleSpawn = () => {
                spawnVehicle(vehicle.modelName || vehicle.name)
              }
              
              const isActive = panelsVisible && selectedVehicle?.id === vehicle.id
              const isCurrentVehicle = currentVehicle && (currentVehicle.modelName === vehicle.name || currentVehicle.modelName === vehicle.modelName)
              return (
                <div
                  key={vehicle.id}
                  className={`relative p-3 sm:p-4 rounded-lg border transition-colors ${
                    isActive
                      ? 'border-fuchsia-500/60 bg-fuchsia-900/10'
                      : 'bg-base-800 border-base-700 hover:bg-base-700'
                  }`}
                  onClick={() => {
                    // –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                    setPanelsVisible(v => {
                      const same = selectedVehicle?.id === vehicle.id
                      const nextVisible = same ? !v : true
                      setShowTuning(nextVisible)
                      setShowMeta(nextVisible)
                      return nextVisible
                    })
                    setSelectedVehicle(vehicle)
                  }}
                >
                  {isActive && (
                    <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-pink-500 to-fuchsia-500 rounded-l" />
                  )}
                  <div className="flex items-center justify-between gap-2 sm:gap-3">
                    <div className="flex-1 min-w-0">
                      <div className="text-xs sm:text-sm font-medium flex items-center space-x-2">
                        {isCurrentVehicle && (
                          <div className="w-2 h-2 rounded-full bg-violet-500 animate-pulse flex-shrink-0" title="–í—ã –≤ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ" />
                        )}
                        <span className={`truncate ${isActive ? 'bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-fuchsia-400' : 'text-white'}`}>
                          {vehicle.displayName || vehicle.name}
                        </span>
                        
                        {/* L –∏ R –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
                        {localEdits?.includes(vehicle.name) && (
                          <div className="w-5 h-5 rounded-full bg-orange-500 flex items-center justify-center text-white text-xs font-bold" title="–õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω">
                            L
                          </div>
                        )}
                        {restartRequired?.includes(vehicle.name) && (
                          <div className="w-5 h-5 rounded-full bg-red-500 flex items-center justify-center text-white text-xs font-bold" title="–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç">
                            R
                          </div>
                        )}
                        
                        {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
                        <button
                          onClick={(e) => {
                            e.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫—É
                            toggleFavorite(vehicle.name)
                          }}
                          className={`p-1 rounded transition-colors ${
                            isFavorite(vehicle.name)
                              ? 'text-yellow-400 hover:text-yellow-300'
                              : 'text-gray-500 hover:text-yellow-400'
                          }`}
                          title={isFavorite(vehicle.name) ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                        >
                          <Star className={`w-4 h-4 ${isFavorite(vehicle.name) ? 'fill-current' : ''}`} />
                        </button>
                        
                        {isPendingRestart && (
                          <span className="inline-flex items-center h-5 px-2 text-[10px] leading-none rounded-full bg-orange-900 text-orange-300">–ù—É–∂–µ–Ω —Ä–µ—Å—Ç–∞—Ä—Ç</span>
                        )}
                      </div>
                      <div className="text-xs text-gray-400 truncate">{vehicle.name}</div>
                      {!('isGTAV' in vehicle && vehicle.isGTAV) && 'tags' in vehicle && vehicle.tags && vehicle.tags.length > 0 && (
                        <div className="flex space-x-1 mt-1">
                          {vehicle.tags.slice(0, 3).map((tag: string, index: number) => (
                            <span key={index} className="px-1 py-0.5 bg-primary-900 text-primary-300 text-xs rounded">
                              {tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
                      <div className="flex items-center space-x-2">
                        <Car className="w-4 h-4 text-primary-400" />
                        <span className="text-xs text-gray-500">
                          {'isGTAV' in vehicle && vehicle.isGTAV ? 'GTA V' : 
                           'isLocal' in vehicle && vehicle.isLocal ? 'Local' :
                           `size` in vehicle && vehicle.size > 0 ? `${(vehicle.size / 1024 / 1024).toFixed(1)}MB` : 'N/A'}
                        </span>
                      </div>
                      
                      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                      <div className="flex items-center space-x-1">
                        {'isGTAV' in vehicle && vehicle.isGTAV ? (
                          // –î–ª—è GTAV –º–∞—à–∏–Ω - —Ç–æ–ª—å–∫–æ —Å–ø–∞–≤–Ω
                          <button
                            onClick={handleSpawn}
                            disabled={!isAvailable}
                            className="p-2 text-green-400 hover:text-green-300 hover:bg-green-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å GTA V –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                          >
                            <Play className="w-4 h-4" />
                          </button>
                        ) : 'isLocal' in vehicle && vehicle.isLocal ? (
                          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω - —Ç–æ–ª—å–∫–æ —Å–ø–∞–≤–Ω
                          <button
                            onClick={handleSpawn}
                            disabled={!isAvailable}
                            className="p-2 text-green-400 hover:text-green-300 hover:bg-green-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                          >
                            <Play className="w-4 h-4" />
                          </button>
                        ) : !isDownloaded ? (
                          // –î–ª—è HUB –º–∞—à–∏–Ω - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                          <button
                            onClick={handleDownload}
                            disabled={isChecking}
                            className="p-2 text-blue-400 hover:text-blue-300 hover:bg-blue-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="–°–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                          >
                            <Download className="w-4 h-4" />
                          </button>
                        ) : (
                          // –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö HUB –º–∞—à–∏–Ω - —Å–ø–∞–≤–Ω –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
                          <>
                            <button
                              onClick={handleSpawn}
                              disabled={!isAvailable || isChecking || isPendingRestart}
                              className="p-2 text-green-400 hover:text-green-300 hover:bg-green-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title={isPendingRestart ? '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞' : '–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'}
                            >
                              <Play className="w-4 h-4" />
                            </button>
                            <button
                              onClick={handleReload}
                              disabled={isChecking}
                              className="p-2 text-orange-400 hover:text-orange-300 hover:bg-orange-900/20 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                            >
                              <RotateCcw className="w-4 h-4" />
                            </button>
                          </>
                        )}
                        {isChecking && (
                          <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )
            })
          )}
        </div>
      )}

      {/* Current Vehicle Controls */}
      {currentVehicle && (
        <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-base-800 rounded-lg">
          <h3 className="text-sm font-medium text-white mb-3">–¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å</h3>
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-white">{currentVehicle.modelName}</div>
              <div className="text-xs text-gray-400">ID: {currentVehicle.id}</div>
            </div>
            <Button
              onClick={() => destroyVehicle()}
              variant="danger"
              size="sm"
              className="text-xs"
            >
              –£–¥–∞–ª–∏—Ç—å
            </Button>
          </div>
        </div>
      )}

      {/* Info */}
      <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-base-800 rounded-lg">
        <div className="text-xs text-gray-400">
          {isAvailable 
            ? 'üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ALT:V - –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±—É–¥—É—Ç –∑–∞—Å–ø–∞–≤–Ω–µ–Ω—ã –≤ –∏–≥—Ä–µ'
            : 'üåê –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'
          }
        </div>
      </div>

        {/* Right side panels (tuning + meta editor) in a portal to escape layout */}
      {panelsVisible && (
        <Portal>
        <div 
          className="pointer-events-auto fixed z-[9999] flex flex-col space-y-3 transition-all duration-300" 
          style={yftGameViewActive ? {
            // Game View —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            width: '100vw',
            height: '100vh',
            background: 'transparent'
          } : {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π left)
            top: '4rem',
            bottom: '1rem',
            left: focusMode !== 'off' ? '24px' : panelLeft,
            right: '24px'
          }}
        >
          {/* Header over both panels - —Å–∫—Ä—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ–∫—É—Å–∞ –∏ Game View */}
          {focusMode === 'off' && !yftGameViewActive && (
            <div
              ref={headerRef}
              className="rounded-lg p-3 flex items-center space-x-3 border border-white/10 bg-gradient-to-r from-[#141421] via-[#171927] to-[#0f1913] shadow-[inset_0_1px_0_rgba(255,255,255,.06)] cursor-pointer animate-slide-in-left"
              style={{ width: 'auto' }}
              title="–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª–∏"
              onClick={() => {
                setPanelsVisible(v => {
                  const newVisible = !v
                  if (!newVisible) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª–∏ –≤—Ä—É—á–Ω—É—é
                    setUserManuallyCollapsed(true)
                    console.log('[VehiclesPage] User manually collapsed panels')
                  }
                  setShowTuning(newVisible)
                  setShowMeta(newVisible)
                  setShowActions(newVisible)
                  return newVisible
                })
              }}
            >
              <div className="w-8 h-8 rounded-lg bg-violet-600/30 ring-1 ring-violet-500/40 flex items-center justify-center">
                <Car className="w-4 h-4 text-violet-200" />
              </div>
              <div className="text-sm font-semibold truncate bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-fuchsia-400">
                {selectedVehicle?.displayName || selectedVehicle?.name || activeModel || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'}
              </div>
            </div>
          )}
          
          {/* YFT Viewer –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, 100% –≤ Game View) */}
          {showYftViewer && selectedVehicle && (selectedVehicle.name || selectedVehicle.modelName) && (
            <div 
              className={yftGameViewActive 
                ? "w-full h-full overflow-hidden" 
                : "w-[calc(100vw-15.6vw-72px)] h-[calc(100vh-190px)] overflow-hidden animate-slide-in-left"
              }
              style={yftGameViewActive ? {
                background: 'transparent',
                backgroundColor: 'transparent',
                border: 'none',
                borderRadius: '0',
                width: '100%',
                height: '100%'
              } : {
                background: 'rgba(17, 24, 39, 0.8)',
                backdropFilter: 'blur(8px)',
                border: '1px solid rgba(55, 65, 81, 1)',
                borderRadius: '0.5rem'
              }}
            >
              <YftViewer 
                vehicleName={selectedVehicle.name || selectedVehicle.modelName!} 
                onClose={() => {
                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º focus mode –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                  ;(globalThis as any).__focusMode = 'off'
                  if ((window as any).alt) {
                    ;(window as any).alt.emit('yft-viewer:focus-mode', { mode: 'off' })
                  }
                  console.log('[App] YftViewer closed - reset focus mode')
                  setShowYftViewer(false)
                  setYftGameViewActive(false)
                }} 
                onGameViewChange={(active) => {
                  console.log('[App] Game View changed:', active)
                  setYftGameViewActive(active)
                }}
              />
            </div>
          )}
          
          {/* –ü–∞–Ω–µ–ª–∏ —Ç—é–Ω–∏–Ω–≥–∞, –º–µ—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç YFT Viewer) */}
          {!showYftViewer && (
          <div className="flex space-x-3 flex-1 overflow-hidden">
            {(focusMode === 'off' || focusMode === 'tuning') && showTuning && selectedVehicle && (
              (vehicleStatuses.get(selectedVehicle.id) as string) === 'downloaded' || 
              ('isGTAV' in selectedVehicle && (selectedVehicle as any).isGTAV) ||
              ('isLocal' in selectedVehicle && (selectedVehicle as any).isLocal)
            ) && (
              <div data-panel-type="tuning" className="w-[calc((100vw-15.6vw-96px)/3)] min-w-[400px] max-w-[650px] h-[calc(100vh-190px)] overflow-y-auto bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left">
                <div className="text-sm font-semibold text-white mb-3">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</div>
                <TuningSliders
                  onChange={(param, value) => updateHandling(param, value)}
                  onReset={() => {
                    // –î–ª—è GTAV –º–∞—à–∏–Ω - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π handling –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
                    if (selectedVehicle && 'isGTAV' in selectedVehicle && selectedVehicle.isGTAV) {
                      console.log('[VehiclesPage] Resetting GTAV vehicle - reloading original handling')
                      requestHandlingMeta(selectedVehicle.name, 'gtav')
                    } else {
                      // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∞—à–∏–Ω - –æ–±—ã—á–Ω—ã–π —Å–±—Ä–æ—Å
                      resetHandling()
                    }
                  }}
                  onXmlPatch={(param, value) => {
                    const tag = paramToXmlTag[param]
                    if (!tag || !handlingMetaXml) return
                    setHandlingMetaXml(prev => updateXmlNumericValue(prev, tag, value))
                    setHighlightedXmlParam(tag)
                  }}
                  disabled={!currentVehicle || !selectedVehicle || ![selectedVehicle.name, selectedVehicle.modelName].includes(currentVehicle.modelName)}
                  initialValues={handlingMetaXml}
                  vehicleKey={selectedVehicle.name}
                  currentXml={handlingMetaXml}
                  onFocusModeToggle={() => setFocusMode(focusMode === 'tuning' ? 'off' : 'tuning')}
                  focusMode={focusMode === 'tuning'}
                  isVanillaVehicle={'isGTAV' in selectedVehicle && selectedVehicle.isGTAV}
                  onValuesChange={handleValuesChange}
                />
              </div>
          )}
          {/* Handling.meta editor panel */}
          {!showYftViewer && focusMode === 'off' && showMeta && selectedVehicle && shouldShowXmlEditor(selectedVehicle) && (
            <div data-panel-type="meta" className="w-[calc((100vw-15.6vw-96px)/3)] min-w-[400px] max-w-[650px] h-[calc(100vh-190px)] overflow-hidden bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left">
              <div className="text-sm font-semibold text-white mb-2">handling.meta</div>
              <HandlingMetaEditor 
                xml={handlingMetaXml} 
                onXmlChange={setHandlingMetaXml}
                highlightedParam={highlightedXmlParam}
                currentValues={currentHandlingValues}
                onPresetLoad={handlePresetLoad}
                disabled={!currentVehicle || !selectedVehicle || ![selectedVehicle.name, selectedVehicle.modelName].includes(currentVehicle.modelName)}
              />
            </div>
          )}
          
          {/* Vehicle actions panel - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤—ã–∫–ª –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö */}
          {!showYftViewer && (focusMode === 'off' || focusMode === 'actions') && showActions && selectedVehicle && (
            <div 
              data-panel-type="actions"
              className={`${
                focusMode === 'actions' ? 'w-[min(400px,30vw)]' : 'w-[calc((100vw-15.6vw-96px)/3)]'
              } min-w-[320px] max-w-[650px] h-[calc(100vh-190px)] overflow-hidden bg-base-900/80 backdrop-blur-sm border border-base-700 rounded-lg p-4 animate-slide-in-left transition-all duration-300`}
            >
              <VehicleActions 
                disabled={!currentVehicle || !selectedVehicle || ![selectedVehicle.name, selectedVehicle.modelName].includes(currentVehicle.modelName)}
                onAction={(action, data) => {
                  console.log('[VehiclesPage] Vehicle action:', action, data)
                }}
                onFocusModeToggle={() => setFocusMode(focusMode === 'actions' ? 'off' : 'actions')}
                focusMode={focusMode === 'actions'}
                vehicleName={selectedVehicle?.name || selectedVehicle?.modelName}
                onYftViewerToggle={(show) => setShowYftViewer(show)}
              />
            </div>
          )}
          </div>
          )}
        </div>
        </Portal>
      )}
    </div>
  )
}
