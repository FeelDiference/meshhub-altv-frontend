// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

import { downloadVehicle } from './vehicles'
import { VEHICLE_CONFIG } from '@/config/vehicles'
import type { VehicleResource } from '@/types/vehicle'

export type VehicleStatus = 'not_downloaded' | 'downloaded' | 'checking'

export interface VehicleState {
  status: VehicleStatus
  localPath?: string
  lastChecked?: number
}

// –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
const vehicleStates = new Map<string, VehicleState>()

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
 */
export async function checkVehicleExists(vehicle: VehicleResource): Promise<boolean> {
  const now = Date.now()
  const cached = vehicleStates.get(vehicle.id)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  if (cached && cached.lastChecked && (now - cached.lastChecked) < VEHICLE_CONFIG.cacheTimeout) {
    return cached.status === 'downloaded'
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è"
  vehicleStates.set(vehicle.id, { 
    status: 'checking',
    lastChecked: now 
  })
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    const fileName = `${vehicle.name}${VEHICLE_CONFIG.extensions[0]}`
    const localPath = `${VEHICLE_CONFIG.downloadPath}${fileName}`
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ File System Access API
    const exists = await checkFileExistsInFolder(localPath)
    
    vehicleStates.set(vehicle.id, {
      status: exists ? 'downloaded' : 'not_downloaded',
      localPath: exists ? localPath : undefined,
      lastChecked: now
    })
    
    return exists
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ ${vehicle.name}:`, error)
    vehicleStates.set(vehicle.id, {
      status: 'not_downloaded',
      lastChecked: now
    })
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 */
async function checkFileExistsInFolder(filePath: string): Promise<boolean> {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${filePath}`)
    
    // –í –±—Ä–∞—É–∑–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ localStorage - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const downloadedFiles = JSON.parse(
      localStorage.getItem('downloadedVehicles') || '{}'
    )
    
    // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏
    for (const fileInfo of Object.values(downloadedFiles) as any[]) {
      if (fileInfo.path === filePath) {
        console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ: ${filePath}`)
        return true
      }
    }
    
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
    return false
    
  } catch (error) {
    console.error('File check error:', error)
    return false
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å
 * –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ALT:V —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
 */
export async function downloadVehicleWithStatus(vehicle: VehicleResource): Promise<void> {
  console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${vehicle.name}`)
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    vehicleStates.set(vehicle.id, { status: 'checking' })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ALT:V WebView
    const isAltV = typeof window !== 'undefined' && 'alt' in window
    
    if (isAltV) {
      // ALT:V —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è server-side —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      console.log(`[downloadVehicleWithStatus] ALT:V mode - using vehicle:download event`)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const { getAccessToken } = await import('./auth')
      const token = getAccessToken()
      
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const downloadPromise = new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª'))
        }, 120000) // 2 –º–∏–Ω—É—Ç—ã
        
        const handleDownloaded = (response: { 
          success: boolean
          vehicleId: string
          vehicleName: string
          message: string
        }) => {
          clearTimeout(timeout)
          ;(window as any).alt.off('vehicle:downloaded', handleDownloaded)
          
          if (response.success && response.vehicleId === vehicle.id) {
            console.log(`[downloadVehicleWithStatus] ‚úÖ Vehicle downloaded: ${response.vehicleName}`)
            resolve()
          } else if (!response.success && response.vehicleId === vehicle.id) {
            reject(new Error(response.message || '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è'))
          }
        }
        
        ;(window as any).alt.on('vehicle:downloaded', handleDownloaded)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        ;(window as any).alt.emit('vehicle:download', {
          vehicleId: vehicle.id,
          vehicleName: vehicle.name,
          token
        })
        
        console.log(`[downloadVehicleWithStatus] üì§ Event sent: vehicle:download`)
      })
      
      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
      await downloadPromise
      
    } else {
      // –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      console.log(`[downloadVehicleWithStatus] Browser mode - using direct download`)
      await downloadVehicle(vehicle.id)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—Å–∫–∞—á–∞–Ω"
    const localPath = `${VEHICLE_CONFIG.downloadPath}${vehicle.name}${VEHICLE_CONFIG.extensions[0]}`
    vehicleStates.set(vehicle.id, {
      status: 'downloaded',
      localPath,
      lastChecked: Date.now()
    })
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    const downloadedVehicles = JSON.parse(
      localStorage.getItem('downloadedVehicles') || '{}'
    )
    downloadedVehicles[vehicle.id] = {
      name: vehicle.name,
      path: localPath,
      downloadedAt: Date.now()
    }
    localStorage.setItem('downloadedVehicles', JSON.stringify(downloadedVehicles))
    
    console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å ${vehicle.name} —Å–∫–∞—á–∞–Ω –≤ ${localPath}`)
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ${vehicle.name}:`, error)
    vehicleStates.set(vehicle.id, { 
      status: 'not_downloaded',
      lastChecked: Date.now()
    })
    throw error
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
 */
export async function deleteVehicleLocal(vehicle: VehicleResource): Promise<void> {
  console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${vehicle.name}`)
  
  try {
    const localPath = `${VEHICLE_CONFIG.downloadPath}${vehicle.name}${VEHICLE_CONFIG.extensions[0]}`
    
    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ localStorage
    const downloadedVehicles = JSON.parse(
      localStorage.getItem('downloadedVehicles') || '{}'
    )
    delete downloadedVehicles[vehicle.id]
    localStorage.setItem('downloadedVehicles', JSON.stringify(downloadedVehicles))
    
    console.log(`üìù –£–¥–∞–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: ${localPath}`)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    vehicleStates.set(vehicle.id, {
      status: 'not_downloaded',
      lastChecked: Date.now()
    })
    
    console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å ${vehicle.name} —É–¥–∞–ª–µ–Ω`)
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${vehicle.name}:`, error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è deleteFileFromFolder –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ localStorage

/**
 * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—É–¥–∞–ª—è–µ—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∑–∞–Ω–æ–≤–æ)
 */
export async function reloadVehicle(vehicle: VehicleResource): Promise<void> {
  console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${vehicle.name}`)
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
    const exists = await checkVehicleExists(vehicle)
    if (exists) {
      await deleteVehicleLocal(vehicle)
    }
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await downloadVehicleWithStatus(vehicle)
    
    console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å ${vehicle.name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω`)
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ${vehicle.name}:`, error)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
export function getVehicleState(vehicleId: string): VehicleState | undefined {
  return vehicleStates.get(vehicleId)
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */
export function clearVehicleStatesCache(): void {
  vehicleStates.clear()
  console.log('üßπ –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—á–∏—â–µ–Ω')
}
