// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç.–¥.)

import type { InteriorResource, Interior, InteriorStatus } from '../types/interior'

export type { InteriorStatus }

export interface InteriorState {
  status: InteriorStatus
  lastChecked?: number
}

const interiorStates = new Map<string, InteriorState>()
const LOCAL_STORAGE_KEY = 'installedInteriors'

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä
 */
export async function checkInteriorExists(interior: InteriorResource): Promise<boolean> {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞: ${interior.name}`)
  
  // –ï—Å–ª–∏ ALT:V –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  if (!window.alt) {
    const installed = getInstalledInteriors()
    return installed.includes(interior.id)
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É ALT:V –∫–ª–∏–µ–Ω—Ç–∞
  return new Promise((resolve) => {
    const timeout = setTimeout(() => {
      window.alt?.off?.('meshhub:interior:check:response', handler)
      // Fallback –∫ localStorage –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
      const installed = getInstalledInteriors()
      resolve(installed.includes(interior.id))
    }, 5000)
    
    const handler = (response: { interiorName: string; exists: boolean; error?: string }) => {
      clearTimeout(timeout)
      window.alt?.off?.('meshhub:interior:check:response', handler)
      
      if (response.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞:', response.error)
        const installed = getInstalledInteriors()
        resolve(installed.includes(interior.id))
      } else {
        resolve(response.exists)
      }
    }
    
    window.alt?.on?.('meshhub:interior:check:response', handler)
    window.alt?.emit?.('meshhub:interior:check', {
      interiorId: interior.id,
      interiorName: interior.name
    })
  })
}

/**
 * –°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä —á–µ—Ä–µ–∑ ALT:V
 */
export async function downloadInteriorToLocal(
  interior: InteriorResource,
  token: string
): Promise<{ success: boolean; message: string }> {
  console.log(`‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—å–µ—Ä: ${interior.name}`)
  
  if (!window.alt) {
    console.error('‚ùå ALT:V –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    return { success: false, message: 'ALT:V –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }
  }
  
  return new Promise((resolve) => {
    const timeout = setTimeout(() => {
      window.alt?.off?.('meshhub:interior:download:response', handler)
      resolve({ success: false, message: 'Timeout: –∏–Ω—Ç–µ—Ä—å–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥' })
    }, 30000) // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
    
    const handler = (response: { success: boolean; message: string; interiorId?: string; alreadyExists?: boolean }) => {
      clearTimeout(timeout)
      window.alt?.off?.('meshhub:interior:download:response', handler)
      
      if (response.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        const installed = getInstalledInteriors()
        if (!installed.includes(interior.id)) {
          installed.push(interior.id)
          localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(installed))
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        interiorStates.set(interior.id, {
          status: 'installed',
          lastChecked: Date.now()
        })
      }
      
      resolve(response)
    }
    
    window.alt?.on?.('meshhub:interior:download:response', handler)
    window.alt?.emit?.('meshhub:interior:download', {
      interiorId: interior.id,
      interiorName: interior.name,
      token: token
    })
  })
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
 */
export function getInteriorStatus(interior: InteriorResource): InteriorStatus {
  const state = interiorStates.get(interior.id)
  if (state) {
    return state.status
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const installed = getInstalledInteriors()
  return installed.includes(interior.id) ? 'installed' : 'not_installed'
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
 */
export function clearInteriorCache(interiorId: string): void {
  interiorStates.delete(interiorId)
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤
 */
export function clearAllInteriorCaches(): void {
  interiorStates.clear()
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ –∏–∑ localStorage
 */
function getInstalledInteriors(): string[] {
  try {
    const data = localStorage.getItem(LOCAL_STORAGE_KEY)
    return data ? JSON.parse(data) : []
  } catch {
    return []
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ –∏–∑ ALT:V –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function getInstalledInteriorsFromClient(): Promise<string[]> {
  if (!window.alt) {
    return getInstalledInteriors()
  }
  
  return new Promise((resolve) => {
    const timeout = setTimeout(() => {
      window.alt?.off?.('meshhub:interior:list:response', handler)
      resolve(getInstalledInteriors())
    }, 5000)
    
    const handler = (response: { interiors: string[]; error?: string }) => {
      clearTimeout(timeout)
      window.alt?.off?.('meshhub:interior:list:response', handler)
      
      if (response.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤:', response.error)
        resolve(getInstalledInteriors())
      } else {
        resolve(response.interiors || [])
      }
    }
    
    window.alt?.on?.('meshhub:interior:list:response', handler)
    window.alt?.emit?.('meshhub:interior:list:request', {})
  })
}

/**
 * –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä—É
 */
export async function teleportToInterior(interior: Interior): Promise<void> {
  if (!window.alt) {
    console.error('‚ùå ALT:V –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    return
  }
  
  console.log(`üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä—É: ${interior.archetypeName}`)
  
  window.alt.emit('meshhub:interior:teleport', {
    interiorId: interior.id,
    archetypeName: interior.archetypeName,
    position: {
      x: interior.position.x,
      y: interior.position.y,
      z: interior.position.z
    }
  })
}

