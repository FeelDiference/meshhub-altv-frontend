// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ MeshHub Backend

import axios, { AxiosResponse } from 'axios'
import { API_CONFIG, ERROR_CODES } from '@/config/api'
import type { User, LoginRequest, LoginResponse, SessionData } from '@/types/auth'
import { SessionCrypto } from '@/utils/crypto'
import { mockLogin, checkBackendAvailability } from './auth-mock'

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
  SESSION: 'meshhub_altv_session',
  USER: 'meshhub_altv_user',
} as const

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const apiClient = axios.create({
  baseURL: API_CONFIG.baseUrl,
  timeout: API_CONFIG.timeouts.default,
  headers: API_CONFIG.defaultHeaders,
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
apiClient.interceptors.request.use((config) => {
  const token = getAccessToken()
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
      try {
        await refreshToken()
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return apiClient.request(error.config)
      } catch (refreshError) {
        // Refresh –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        clearSession()
        // –ú–æ–∂–Ω–æ dispatch event –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI –æ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ
        window.dispatchEvent(new CustomEvent('auth:logout'))
        throw error
      }
    }
    throw error
  }
)

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function login(credentials: LoginRequest): Promise<LoginResponse> {
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ backend (—Å proxy –≤ dev)
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ MeshHub Backend...')
    
    const response: AxiosResponse<LoginResponse> = await apiClient.post(
      API_CONFIG.endpoints.login,
      credentials
    )

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ backend')
    
    const { token, user } = response.data

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const sessionData: SessionData = {
      userId: user.id,
      token,
      expiresAt: Date.now() + (24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    saveSession(sessionData)
    saveUser(user)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ backend
    window.dispatchEvent(new CustomEvent('auth:backend-success'))

    return response.data
    
  } catch (error: any) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ backend:', error.message)
    
    // –ï—Å–ª–∏ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –≤ dev —Ä–µ–∂–∏–º–µ
    if (import.meta.env.DEV && (
      error.code === 'ERR_NETWORK' || 
      error.code === 'ECONNABORTED' ||
      error.response?.status >= 500
    )) {
      console.log('üé≠ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
      
      try {
        const mockResponse = await mockLogin(credentials)
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const sessionData: SessionData = {
          userId: mockResponse.user.id,
          token: mockResponse.token,
          expiresAt: Date.now() + (24 * 60 * 60 * 1000),
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        saveSession(sessionData)
        saveUser(mockResponse.user)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ mock
        window.dispatchEvent(new CustomEvent('auth:mock-fallback'))

        return mockResponse
      } catch (mockError: any) {
        throw new Error(mockError.message)
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    if (error.response?.status === 401) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    } else if (error.response?.status === 429) {
      throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É')
    } else if (error.code === 'ECONNABORTED') {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
    } else {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É')
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 */
export async function refreshToken(): Promise<void> {
  try {
    const response: AxiosResponse<{ access_token: string; user: User }> = await apiClient.post(
      API_CONFIG.endpoints.refresh
    )

    const { access_token, user } = response.data

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const sessionData: SessionData = {
      userId: user.id,
      token: access_token,
      expiresAt: Date.now() + (24 * 60 * 60 * 1000),
    }

    saveSession(sessionData)
    saveUser(user)
  } catch (error) {
    console.error('Token refresh failed:', error)
    throw error
  }
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
export async function logout(): Promise<void> {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ logout (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await apiClient.post(API_CONFIG.endpoints.logout)
  } catch (error) {
    console.error('Logout request failed:', error)
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
  } finally {
    clearSession()
    window.dispatchEvent(new CustomEvent('auth:logout'))
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
 */
export function getAccessToken(): string | null {
  const session = getSession()
  return session?.token || null
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUser(): User | null {
  try {
    const encryptedUser = localStorage.getItem(STORAGE_KEYS.USER)
    if (!encryptedUser) return null

    const user = SessionCrypto.decrypt(encryptedUser)
    return user as User
  } catch (error) {
    console.error('Failed to decrypt user data:', error)
    return null
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 */
export function isAuthenticated(): boolean {
  const session = getSession()
  if (!session) return false

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
  if (Date.now() > session.expiresAt) {
    clearSession()
    return false
  }

  return true
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function hasPermission(permission: string): boolean {
  const user = getUser()
  if (!user) return false

  // –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
  if (user.department === 'IT' && user.position === 'Admin') {
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ (–µ—Å–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∏–ø—ã)
  return false
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)
 */
function saveSession(sessionData: SessionData): void {
  try {
    const encrypted = SessionCrypto.encrypt(sessionData)
    localStorage.setItem(STORAGE_KEYS.SESSION, encrypted)
  } catch (error) {
    console.error('Failed to save session:', error)
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏')
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é
 */
function getSession(): SessionData | null {
  try {
    const encryptedSession = localStorage.getItem(STORAGE_KEYS.SESSION)
    if (!encryptedSession) return null

    const session = SessionCrypto.decrypt(encryptedSession)
    return session as SessionData
  } catch (error) {
    console.error('Failed to decrypt session:', error)
    // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    localStorage.removeItem(STORAGE_KEYS.SESSION)
    return null
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)
 */
function saveUser(user: User): void {
  try {
    const encrypted = SessionCrypto.encrypt(user)
    localStorage.setItem(STORAGE_KEYS.USER, encrypted)
  } catch (error) {
    console.error('Failed to save user data:', error)
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
  }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
 */
function clearSession(): void {
  localStorage.removeItem(STORAGE_KEYS.SESSION)
  localStorage.removeItem(STORAGE_KEYS.USER)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É
 */
export function validateEmail(email: string): { isValid: boolean; error?: string } {
  if (!email) {
    return { isValid: false, error: 'Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }
  }

  if (!email.includes('@')) {
    return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
  if (!email.endsWith('@1win.pro')) {
    return { isValid: false, error: 'Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@1win.pro' }
  }

  return { isValid: true }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
 */
export function initializeAuth(): Promise<boolean> {
  return new Promise((resolve) => {
    try {
      if (!isAuthenticated()) {
        resolve(false)
        return
      }

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç (< 1 —á–∞—Å–∞), –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      const session = getSession()
      if (session && (session.expiresAt - Date.now()) < (60 * 60 * 1000)) {
        refreshToken()
          .then(() => resolve(true))
          .catch(() => {
            clearSession()
            resolve(false)
          })
      } else {
        resolve(true)
      }
    } catch (error) {
      console.error('Auth initialization failed:', error)
      clearSession()
      resolve(false)
    }
  })
}
