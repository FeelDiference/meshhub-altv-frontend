// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ - –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ backend

import { apiClient } from './auth'
import type { VehicleResource } from '@/types/vehicle'

export interface VehicleListResponse {
  success: boolean
  total: number
  vehicles: VehicleResource[]
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å backend
 */
export async function getVehicles(): Promise<VehicleResource[]> {
  console.log('üöó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å backend...')
  
  try {
    const response = await apiClient.get('/api/rpf/archives', {
      params: {
        limit: 10000 // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∞—Ä—Ö–∏–≤—ã
      }
    })
    
    console.log('‚úÖ –ê—Ä—Ö–∏–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data)
    console.log('üîç Total archives from backend:', response.data.total)
    console.log('üîç Returned archives count:', response.data.returned)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    const archives = response.data.archives || []
    console.log('üîç Archives array length:', archives.length)
    
    const vehicleArchives = archives.filter((archive: any) => 
      archive.resource_type === 'vehicle'
    )
    
    console.log(`üöó –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${vehicleArchives.length} –∏–∑ ${archives.length} –∞—Ä—Ö–∏–≤–æ–≤`)
    
    // –î–µ–±–∞–≥: –ø–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    if (vehicleArchives.length > 0) {
      console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞:', JSON.stringify(vehicleArchives[0], null, 2))
    }
    
    // –ò—â–µ–º –Ω–∞—à–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –≤ RAW –¥–∞–Ω–Ω—ã—Ö
    const testNames = ['baze_senna', 'baze_rx7', 'baze_lixl9', 'baze_rmodgtr50']
    console.log('üîç Searching for installed vehicles in raw archives...')
    for (const testName of testNames) {
      const foundRaw = archives.find((a: any) => 
        a.name === testName || 
        a.group_name === testName || 
        a.original_name === testName
      )
      if (foundRaw) {
        console.log(`‚úÖ FOUND "${testName}" in raw archives:`, JSON.stringify(foundRaw, null, 2))
      } else {
        console.log(`‚ùå NOT FOUND "${testName}" in raw archives`)
      }
    }
    
    return vehicleArchives.map((archive: any) => {
      const mapped = {
        id: archive.id,
        name: archive.group_name || archive.name, // –∏—Å–ø–æ–ª—å–∑—É–µ–º group_name –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è
        displayName: archive.group_name || archive.original_name || archive.name,
        modelName: archive.group_name, // –¥–ª—è spawn –∏—Å–ø–æ–ª—å–∑—É–µ–º group_name
        category: archive.resource_type,
        tags: [], // –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤
        size: archive.size,
        createdAt: archive.discovered_at || archive.updated_at,
        updatedAt: archive.updated_at,
        metadata: null
      }
      
      // –î–µ–±–∞–≥ –¥–ª—è baze_senna —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–æ–ª—è
      if (archive.group_name === 'baze_senna' || archive.name === 'baze_senna' || archive.original_name?.includes('senna')) {
        console.log('üîç FOUND baze_senna! Full archive data:', JSON.stringify(archive, null, 2))
        console.log('üîç Mapped to:', JSON.stringify(mapped, null, 2))
      }
      
      return mapped
    })
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`)
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è/–∞—Ä—Ö–∏–≤–∞
 */
export async function getVehicleMetadata(vehicleId: string) {
  console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${vehicleId}...`)
  
  try {
    const response = await apiClient.get(`/api/rpf/archives/${vehicleId}/vehicle-metadata`)
    
    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data)
    return response.data
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${error.message}`)
  }
}

/**
 * –°–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å/–∞—Ä—Ö–∏–≤
 */
export async function downloadVehicle(vehicleId: string) {
  console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${vehicleId}...`)
  
  try {
    const response = await apiClient.get(`/api/rpf/archives/${vehicleId}/download`, {
      responseType: 'blob'
    })
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const url = window.URL.createObjectURL(new Blob([response.data]))
    const link = document.createElement('a')
    link.href = url
    link.download = `vehicle_${vehicleId}.rpf`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–∫–∞—á–∞–Ω')
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${error.message}`)
  }
}
