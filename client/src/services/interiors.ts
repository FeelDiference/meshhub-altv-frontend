// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ (MLO)

import axios from 'axios'
import { API_CONFIG } from '../config/api'
import { getAccessToken } from './auth'
import type { InteriorResource, InteriorListResponse, InteriorDetailsResponse } from '../types/interior'

// –°–æ–∑–¥–∞–µ–º axios –∏–Ω—Å—Ç–∞–Ω—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
const apiClient = axios.create({
  baseURL: API_CONFIG.baseUrl,
  timeout: API_CONFIG.timeouts.default,
  headers: API_CONFIG.defaultHeaders
})

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Bearer —Ç–æ–∫–µ–Ω–∞
apiClient.interceptors.request.use((config) => {
  const token = getAccessToken()
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ —Å backend
 */
export async function getInteriors(): Promise<InteriorResource[]> {
  console.log('üè† –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ —Å backend...')

  try {
    const response = await apiClient.get<InteriorListResponse>('/api/rpf/mlo', {
      params: {
        limit: 200
      }
    })

    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—å–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data)

    const interiors = response.data.interiors || []
    console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤: ${interiors.length}`)

    return interiors
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤: ${error.message}`)
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞—Ö –∞—Ä—Ö–∏–≤–∞
 */
export async function getInteriorDetails(archiveId: string): Promise<InteriorDetailsResponse> {
  console.log(`üè† –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ ${archiveId}...`)

  try {
    const response = await apiClient.get<InteriorDetailsResponse>(`/api/rpf/mlo/${archiveId}`)
    console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data)
    return response.data
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞: ${error.message}`)
  }
}

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤
 */
export async function scanArchiveForInteriors(archiveId: string): Promise<void> {
  console.log(`üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ ${archiveId} –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤...`)

  try {
    await apiClient.post(`/api/rpf/mlo/${archiveId}/scan`)
    console.log('‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤: ${error.message}`)
  }
}

/**
 * –°–∫–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä (–∞—Ä—Ö–∏–≤)
 */
export async function downloadInterior(archiveId: string): Promise<void> {
  console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—å–µ—Ä ${archiveId}...`)
  
  try {
    const response = await apiClient.get(`/api/rpf/archives/${archiveId}/download`, {
      responseType: 'blob'
    })
    
    // –°–æ–∑–¥–∞–µ–º blob URL –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
    const url = window.URL.createObjectURL(new Blob([response.data]))
    const link = document.createElement('a')
    link.href = url
    link.download = `interior_${archiveId}.rpf`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
    
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—å–µ—Ä —Å–∫–∞—á–∞–Ω')
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä: ${error.message}`)
  }
}

