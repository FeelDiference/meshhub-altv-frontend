/**
 * Hook for YFT Model Caching
 * –•—É–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è YFT –º–æ–¥–µ–ª–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ YftViewer
 */

import React, { useState, useCallback, useRef } from 'react'
import { yftCache, CachedYFTData, CacheStats } from '../utils/yftCache'

export interface CacheStatus {
  /** –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞ */
  loadingFromCache: boolean
  /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –≤ –∫—ç—à */
  savingToCache: boolean
  /** –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ */
  stats: CacheStats | null
  /** –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è */
  error: string | null
}

export interface UseYFTCacheResult {
  /** –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ */
  cacheStatus: CacheStatus
  /** –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞ */
  loadFromCache: (fileName: string, fileHash?: string) => Promise<CachedYFTData | null>
  /** –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à */
  saveToCache: (data: Omit<CachedYFTData, 'cachedAt' | 'version'>) => Promise<void>
  /** –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ */
  clearCache: () => Promise<void>
  /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */
  refreshStats: () => Promise<void>
  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ */
  isCacheAvailable: boolean
}

export function useYFTCache(): UseYFTCacheResult {
  const [cacheStatus, setCacheStatus] = useState<CacheStatus>({
    loadingFromCache: false,
    savingToCache: false,
    stats: null,
    error: null
  })

  const isCacheAvailableRef = useRef<boolean>(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  const initCache = useCallback(async () => {
    if (isCacheAvailableRef.current) return true
    
    try {
      if (!yftCache.isAvailable()) {
        console.log('[useYFTCache] ‚ùå IndexedDB not available')
        return false
      }

      await yftCache.init()
      isCacheAvailableRef.current = true
      console.log('[useYFTCache] ‚úÖ Cache initialized')
      return true
    } catch (error) {
      console.error('[useYFTCache] ‚ùå Cache initialization failed:', error)
      setCacheStatus(prev => ({ ...prev, error: `Cache init failed: ${error}` }))
      return false
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞
  const loadFromCache = useCallback(async (fileName: string, fileHash?: string): Promise<CachedYFTData | null> => {
    const isAvailable = await initCache()
    if (!isAvailable) return null

    setCacheStatus(prev => ({ ...prev, loadingFromCache: true, error: null }))

    try {
      const cachedData = await yftCache.get(fileName, fileHash)
      
      if (cachedData) {
        console.log(`[useYFTCache] ‚úÖ Loaded ${fileName} from cache`)
      } else {
        console.log(`[useYFTCache] ‚ùå Cache miss for ${fileName}`)
      }

      return cachedData
    } catch (error) {
      console.error('[useYFTCache] ‚ùå Cache load error:', error)
      setCacheStatus(prev => ({ ...prev, error: `Cache load failed: ${error}` }))
      return null
    } finally {
      setCacheStatus(prev => ({ ...prev, loadingFromCache: false }))
    }
  }, [initCache])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à
  const saveToCache = useCallback(async (data: Omit<CachedYFTData, 'cachedAt' | 'version'>): Promise<void> => {
    const isAvailable = await initCache()
    if (!isAvailable) return

    setCacheStatus(prev => ({ ...prev, savingToCache: true, error: null }))

    try {
      const cacheData: CachedYFTData = {
        ...data,
        cachedAt: Date.now(),
        version: '1.0'
      }

      await yftCache.set(cacheData)
      console.log(`[useYFTCache] üíæ Saved ${data.fileName} to cache`)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await refreshStats()
    } catch (error) {
      console.error('[useYFTCache] ‚ùå Cache save error:', error)
      setCacheStatus(prev => ({ ...prev, error: `Cache save failed: ${error}` }))
    } finally {
      setCacheStatus(prev => ({ ...prev, savingToCache: false }))
    }
  }, [initCache])

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  const clearCache = useCallback(async (): Promise<void> => {
    const isAvailable = await initCache()
    if (!isAvailable) return

    try {
      await yftCache.clear()
      console.log('[useYFTCache] üßπ Cache cleared')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      await refreshStats()
    } catch (error) {
      console.error('[useYFTCache] ‚ùå Cache clear error:', error)
      setCacheStatus(prev => ({ ...prev, error: `Cache clear failed: ${error}` }))
    }
  }, [initCache])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  const refreshStats = useCallback(async (): Promise<void> => {
    const isAvailable = await initCache()
    if (!isAvailable) return

    try {
      const stats = await yftCache.getStats()
      setCacheStatus(prev => ({ ...prev, stats }))
    } catch (error) {
      console.error('[useYFTCache] ‚ùå Stats refresh error:', error)
    }
  }, [initCache])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö—É–∫–∞
  React.useEffect(() => {
    refreshStats()
  }, [refreshStats])

  return {
    cacheStatus,
    loadFromCache,
    saveToCache,
    clearCache,
    refreshStats,
    isCacheAvailable: isCacheAvailableRef.current
  }
}
