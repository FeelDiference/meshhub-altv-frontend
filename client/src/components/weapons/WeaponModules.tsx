import React, { useState, useEffect } from 'react'
import { ChevronLeft, ChevronRight, Target, Zap, Eye, Volume2, ArrowUp, ArrowDown } from 'lucide-react'
import toast from 'react-hot-toast'

interface WeaponModulesProps {
  disabled?: boolean
  weaponName?: string
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è
interface WeaponModuleCategory {
  id: number
  name: string
  icon: React.ReactNode
  description: string
  componentType: string
}

// –ú–æ–¥—É–ª–∏ –æ—Ä—É–∂–∏—è
interface WeaponModule {
  hash: number
  name: string
  description: string
  category: number
  modifiers?: Record<string, number> // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä—É–∂–∏—è
}

// –°–ª–æ–≤–∞—Ä—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥—É–ª–µ–π
const MODULE_CATEGORIES: Record<number, { human: string; technical: string }> = {
  0: { human: '–ü—Ä–∏—Ü–µ–ª—ã', technical: 'COMPONENT_AT_SCOPE' },
  1: { human: '–î—É–ª—å–Ω—ã–µ —Ç–æ—Ä–º–æ–∑–∞', technical: 'COMPONENT_AT_MUZZLE' },
  2: { human: '–ì–ª—É—à–∏—Ç–µ–ª–∏', technical: 'COMPONENT_AT_AR_SUPP' },
  3: { human: '–§–æ–Ω–∞—Ä–∏', technical: 'COMPONENT_AT_AR_FLSH' },
  4: { human: '–†—É—á–∫–∏', technical: 'COMPONENT_AT_AR_AFGRIP' },
  5: { human: '–ú–∞–≥–∞–∑–∏–Ω—ã', technical: 'COMPONENT_AT_AR_CLIP' },
  6: { human: '–û–±–≤–µ—Å—ã', technical: 'COMPONENT_AT_PI_CLIP' },
  7: { human: '–õ–∞–∑–µ—Ä—ã', technical: 'COMPONENT_AT_PI_FLSH' },
  8: { human: '–°—Ç–≤–æ–ª—ã', technical: 'COMPONENT_AT_PI_SUPP' },
  9: { human: '–ö–æ–∂—É—Ö–∏', technical: 'COMPONENT_AT_SC_BARREL' }
}

// –°–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä—É–∂–∏—è
const PARAM_NAMES: Record<string, string> = {
  damage: '–£—Ä–æ–Ω',
  force: '–°–∏–ª–∞ –æ—Ç–¥–∞—á–∏',
  forceHitPed: '–°–∏–ª–∞ —É–¥–∞—Ä–∞ (–ª—é–¥–∏)',
  forceHitVehicle: '–°–∏–ª–∞ —É–¥–∞—Ä–∞ (—Ç—Ä-—Ç—ã)',
  accuracySpread: '–†–∞–∑–±—Ä–æ—Å',
  recoilAccuracyMax: '–ú–∞–∫—Å. –æ—Ç–¥–∞—á–∞',
  recoilErrorTime: '–í—Ä–µ–º—è –æ—à–∏–±–∫–∏ –æ—Ç–¥–∞—á–∏',
  recoilRecoveryRate: '–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
  clipSize: '–†–∞–∑–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞',
  timeBetweenShots: '–í—Ä–µ–º—è –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏',
  bulletsInBatch: '–ü—É–ª—å –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª',
  reloadTimeMP: '–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ MP',
  reloadTimeSP: '–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ SP',
  animReloadTime: '–í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏',
  speed: '–°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏',
  range: '–î–∞–ª—å–Ω–æ—Å—Ç—å',
  networkPlayerDamageModifier: '–ú–æ–¥. —É—Ä–æ–Ω–∞ (–∏–≥—Ä–æ–∫–∏)',
  networkPedDamageModifier: '–ú–æ–¥. —É—Ä–æ–Ω–∞ (NPC)',
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
const formatModifier = (_key: string, value: number): string => {
  const sign = value > 0 ? '+' : ''
  const formatted = value % 1 === 0 ? value.toString() : value.toFixed(2)
  return `${sign}${formatted}`
}

const WEAPON_MODULE_CATEGORIES: WeaponModuleCategory[] = [
  { id: 0, name: '–ü—Ä–∏—Ü–µ–ª—ã', icon: <Eye className="w-4 h-4" />, description: '–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—Ü–µ–ª—ã', componentType: 'COMPONENT_AT_SCOPE' },
  { id: 1, name: '–î—É–ª—å–Ω—ã–µ —Ç–æ—Ä–º–æ–∑–∞', icon: <Zap className="w-4 h-4" />, description: '–î—É–ª—å–Ω—ã–µ —Ç–æ—Ä–º–æ–∑–∞ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã', componentType: 'COMPONENT_AT_MUZZLE' },
  { id: 2, name: '–ì–ª—É—à–∏—Ç–µ–ª–∏', icon: <Volume2 className="w-4 h-4" />, description: '–ì–ª—É—à–∏—Ç–µ–ª–∏ –∑–≤—É–∫–∞', componentType: 'COMPONENT_AT_AR_SUPP' },
  { id: 3, name: '–§–æ–Ω–∞—Ä–∏', icon: <Zap className="w-4 h-4" />, description: '–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ–Ω–∞—Ä–∏', componentType: 'COMPONENT_AT_AR_FLSH' },
  { id: 4, name: '–†—É—á–∫–∏', icon: <Target className="w-4 h-4" />, description: '–ü–µ—Ä–µ–¥–Ω–∏–µ —Ä—É–∫–æ—è—Ç–∫–∏', componentType: 'COMPONENT_AT_AR_AFGRIP' },
  { id: 5, name: '–ú–∞–≥–∞–∑–∏–Ω—ã', icon: <Target className="w-4 h-4" />, description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã', componentType: 'COMPONENT_AT_AR_CLIP' },
  { id: 6, name: '–û–±–≤–µ—Å—ã', icon: <Target className="w-4 h-4" />, description: '–û–±–≤–µ—Å—ã –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤', componentType: 'COMPONENT_AT_PI_CLIP' },
  { id: 7, name: '–õ–∞–∑–µ—Ä—ã', icon: <Zap className="w-4 h-4" />, description: '–õ–∞–∑–µ—Ä–Ω—ã–µ —Ü–µ–ª–µ—É–∫–∞–∑–∞—Ç–µ–ª–∏', componentType: 'COMPONENT_AT_PI_FLSH' },
  { id: 8, name: '–°—Ç–≤–æ–ª—ã', icon: <Target className="w-4 h-4" />, description: '–°—Ç–≤–æ–ª—ã –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤', componentType: 'COMPONENT_AT_PI_SUPP' },
  { id: 9, name: '–ö–æ–∂—É—Ö–∏', icon: <Target className="w-4 h-4" />, description: '–ö–æ–∂—É—Ö–∏ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫', componentType: 'COMPONENT_AT_SC_BARREL' }
]

const WeaponModules: React.FC<WeaponModulesProps> = ({ disabled = false, weaponName }) => {
  const [selectedCategory, setSelectedCategory] = useState(0)
  const [categoryModules, setCategoryModules] = useState<Record<number, WeaponModule[]>>({})
  const [currentModules, setCurrentModules] = useState<Record<number, number>>({})
  const [loading, setLoading] = useState(false)
  const [availableCategories, setAvailableCategories] = useState<number[]>([])

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const loadCategoryModules = async (categoryId: number) => {
    if (categoryModules[categoryId]) return

    setLoading(true)
    try {
      if (typeof window !== 'undefined' && 'alt' in window) {
        const alt = (window as any).alt
        if (alt && typeof alt.emit === 'function') {
          alt.emit('weapon:modules:get', { categoryId, weaponName })
        }
      }
    } catch (error) {
      console.error('[WeaponModules] Error loading modules:', error)
    } finally {
      setLoading(false)
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
  const handleWheelNavigation = (e: React.WheelEvent) => {
    if (availableCategories.length === 0) return
    
    e.preventDefault()
    const currentIndex = availableCategories.indexOf(selectedCategory)
    let newIndex = currentIndex
    
    if (e.deltaY > 0) {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      newIndex = (currentIndex + 1) % availableCategories.length
    } else {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      newIndex = currentIndex === 0 ? availableCategories.length - 1 : currentIndex - 1
    }
    
    const newCategory = availableCategories[newIndex]
    setSelectedCategory(newCategory)
    loadCategoryModules(newCategory)
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥—É–ª—å
  const applyModule = (categoryId: number, moduleIndex: number) => {
    if (disabled) {
      toast.error('–í—ã –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å –æ—Ä—É–∂–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π')
      return
    }

    try {
      if (typeof window !== 'undefined' && 'alt' in window) {
        const alt = (window as any).alt
        if (alt && typeof alt.emit === 'function') {
          alt.emit('weapon:modules:apply', { categoryId, moduleIndex })
          setCurrentModules(prev => ({ ...prev, [categoryId]: moduleIndex }))
          toast.success('–ú–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        }
      }
    } catch (error) {
      console.error('[WeaponModules] Error applying module:', error)
      toast.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è')
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const changeModule = (direction: 'prev' | 'next') => {
    const category = WEAPON_MODULE_CATEGORIES.find(c => c.id === selectedCategory)
    if (!category) return

    const modules = categoryModules[category.id] || []
    const currentModule = currentModules[category.id] ?? -1
    
    let newModule = currentModule
    if (direction === 'next') {
      newModule = currentModule >= modules.length - 1 ? -1 : currentModule + 1
    } else {
      newModule = currentModule <= -1 ? modules.length - 1 : currentModule - 1
    }
    
    applyModule(category.id, newModule)
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    const category = WEAPON_MODULE_CATEGORIES.find(c => c.id === selectedCategory)
    if (category) {
      loadCategoryModules(category.id)
    }
  }, [selectedCategory])

  // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  useEffect(() => {
    console.log('[WeaponModules] üîß Starting auto-detect for weapon:', weaponName)
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ—Ä—É–∂–∏—è
    setAvailableCategories([])
    setCategoryModules({})
    setCurrentModules({})
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    WEAPON_MODULE_CATEGORIES.forEach(category => {
      loadCategoryModules(category.id)
    })
  }, [weaponName])

  // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç AltV
  useEffect(() => {
    if (typeof window === 'undefined' || !('alt' in window)) return

    const handleModulesResponse = (data: { categoryId: number; modules: WeaponModule[]; currentModule: number }) => {
      const modules = data.modules || []
      
      console.log(`[WeaponModules] üì° Received modules for category ${data.categoryId}: ${modules.length} modules`)
      
      setCategoryModules(prev => ({ ...prev, [data.categoryId]: modules }))
      setCurrentModules(prev => ({ ...prev, [data.categoryId]: data.currentModule }))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      setAvailableCategories(prev => {
        const newCategories = [...prev]
        if (modules.length > 0 && !newCategories.includes(data.categoryId)) {
          newCategories.push(data.categoryId)
          newCategories.sort((a, b) => a - b)
          console.log(`[WeaponModules] ‚úÖ Added category ${data.categoryId} to available list`)
        } else if (modules.length === 0 && newCategories.includes(data.categoryId)) {
          const index = newCategories.indexOf(data.categoryId)
          newCategories.splice(index, 1)
          console.log(`[WeaponModules] ‚ùå Removed category ${data.categoryId} from available list`)
        }
        return newCategories
      })
    }

    const alt = (window as any).alt
    if (alt && typeof alt.on === 'function') {
      alt.on('weapon:modules:response', handleModulesResponse)
    }

    return () => {
      if (alt && typeof alt.off === 'function') {
        alt.off('weapon:modules:response', handleModulesResponse)
      }
    }
  }, [])

  return (
    <div className="space-y-4">
      {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ */}
      <div 
        className="space-y-2"
        onWheel={handleWheelNavigation}
      >
        <div className="text-sm font-medium text-gray-300 mb-2">
          –ú–æ–¥—É–ª–∏ –æ—Ä—É–∂–∏—è:
          <span className="text-xs text-gray-400 ml-2">
            ({availableCategories.length} –¥–æ—Å—Ç—É–ø–Ω–æ)
          </span>
        </div>
        <div className="grid grid-cols-2 gap-2">
          {availableCategories.length > 0 ? (
            availableCategories.map((categoryId) => {
              const category = WEAPON_MODULE_CATEGORIES.find(c => c.id === categoryId)
              if (!category) return null
              
              const categoryInfo = MODULE_CATEGORIES[categoryId]
              const humanName = categoryInfo?.human || category.name
              const technicalName = categoryInfo?.technical || `COMPONENT_AT_${categoryId}`
              
              return (
                <button
                  key={category.id}
                  onClick={() => {
                    setSelectedCategory(categoryId)
                    loadCategoryModules(categoryId)
                  }}
                  className={`flex flex-col items-center space-y-1 px-3 py-2 rounded-lg text-xs font-medium transition-all ${
                    selectedCategory === categoryId
                      ? 'bg-primary-600 text-white'
                      : 'bg-base-800 text-gray-300 hover:bg-base-700'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    {category.icon}
                    <span className="truncate font-semibold">{humanName}</span>
                  </div>
                  <span className="text-xs opacity-70">({technicalName})</span>
                </button>
              )
            })
          ) : (
            <div className="col-span-2 text-center py-4">
              <div className="text-sm text-orange-400 mb-2">
                üîß –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...
              </div>
              <div className="text-xs text-gray-500">
                –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –æ—Ä—É–∂–∏—è
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–æ–¥—É–ª–µ–π */}
      {availableCategories.includes(selectedCategory) && (
        <div className="bg-base-900/50 border border-base-700 rounded-lg p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="flex flex-col space-y-1">
              <div className="flex items-center space-x-2">
                {WEAPON_MODULE_CATEGORIES.find(c => c.id === selectedCategory)?.icon}
                <span className="text-sm font-medium text-white">
                  {(() => {
                    const categoryInfo = MODULE_CATEGORIES[selectedCategory]
                    return categoryInfo?.human || WEAPON_MODULE_CATEGORIES.find(c => c.id === selectedCategory)?.name
                  })()}
                </span>
              </div>
              <span className="text-xs text-gray-400">
                ({MODULE_CATEGORIES[selectedCategory]?.technical || `COMPONENT_AT_${selectedCategory}`})
              </span>
            </div>
            <div className="text-xs text-gray-400">
              {(() => {
                const modules = categoryModules[selectedCategory] || []
                const currentModule = currentModules[selectedCategory] ?? -1
                
                if (modules.length === 0) {
                  return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
                }
                
                // Display current module index properly: -1 = stock (0), 0+ = actual module index
                const displayIndex = currentModule === -1 ? 0 : currentModule + 1
                const totalOptions = modules.length
                
                return `${displayIndex} / ${totalOptions}`
              })()}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π */}
          {!loading && (categoryModules[selectedCategory] || []).length === 0 && (
            <div className="text-center py-4">
              <div className="text-sm text-orange-400 mb-2">
                ‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
              </div>
              <div className="text-xs text-gray-500">
                –≠—Ç–æ –æ—Ä—É–∂–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–¥—É–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </div>
            </div>
          )}

          <div className="flex items-center justify-center space-x-4">
            <button
              onClick={() => changeModule('prev')}
              disabled={disabled || (categoryModules[selectedCategory] || []).length === 0}
              className="p-2 rounded-lg bg-base-800 hover:bg-base-700 text-gray-300 hover:text-white transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>

            <div className="flex-1 text-center">
              {loading ? (
                <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              ) : (
                <div className="space-y-2">
                  <div className="text-sm text-white">
                    {(() => {
                      const modules = categoryModules[selectedCategory] || []
                      const currentModule = currentModules[selectedCategory] ?? -1
                      
                      if (modules.length === 0) {
                        return '–ú–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
                      }
                      
                      if (currentModule === -1) return '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
                      
                      const module = modules[currentModule]
                      if (!module) return `–ú–æ–¥—É–ª—å #${currentModule + 1}`
                      
                      // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
                      const name = module.name || `–ú–æ–¥—É–ª—å #${currentModule + 1}`
                      
                      return (
                        <div className="flex items-center justify-center">
                          <span className="text-white">
                            {name}
                          </span>
                        </div>
                      )
                    })()}
                  </div>
                  
                  {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
                  {(() => {
                    const modules = categoryModules[selectedCategory] || []
                    const currentModule = currentModules[selectedCategory] ?? -1
                    
                    if (currentModule === -1 || !modules[currentModule]) return null
                    
                    const module = modules[currentModule]
                    const modifiers = module.modifiers || {}
                    
                    if (Object.keys(modifiers).length === 0) {
                      return (
                        <div className="text-xs text-gray-500">
                          –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        </div>
                      )
                    }
                    
                    return (
                      <div className="bg-base-800/50 rounded-lg p-2 space-y-1 border border-base-700">
                        <div className="text-xs text-gray-400 text-center mb-1 font-semibold">
                          –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
                        </div>
                        {Object.entries(modifiers).map(([key, value]) => {
                          const paramName = PARAM_NAMES[key] || key
                          const formattedValue = formatModifier(key, value)
                          const isPositive = value > 0
                          const colorClass = isPositive ? 'text-green-400' : 'text-red-400'
                          const ArrowIcon = isPositive ? ArrowUp : ArrowDown
                          const bgClass = isPositive ? 'bg-green-500/10 border-green-500/30' : 'bg-red-500/10 border-red-500/30'
                          
                          return (
                            <div 
                              key={key} 
                              className={`flex items-center justify-between gap-2 px-2 py-1 rounded border ${bgClass}`}
                            >
                              <div className="flex items-center gap-1.5">
                                <ArrowIcon className={`w-3 h-3 ${colorClass}`} />
                                <span className="text-xs text-gray-300">{paramName}</span>
                              </div>
                              <span className={`text-xs font-bold ${colorClass}`}>
                                {formattedValue}
                              </span>
                            </div>
                          )
                        })}
                      </div>
                    )
                  })()}
                </div>
              )}
            </div>

            <button
              onClick={() => changeModule('next')}
              disabled={disabled || (categoryModules[selectedCategory] || []).length === 0}
              className="p-2 rounded-lg bg-base-800 hover:bg-base-700 text-gray-300 hover:text-white transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default WeaponModules