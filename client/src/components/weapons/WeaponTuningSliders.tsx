import React, { useState, useEffect } from 'react'
import { RotateCcw, Save, Maximize2, Minimize2, User, HardDrive, Cloud } from 'lucide-react'
import toast from 'react-hot-toast'

// –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ alt –≤ WebView
declare global {
  interface Window {
    alt?: {
      emit: (event: string, ...args: any[]) => void
      on: (event: string, callback: (...args: any[]) => void) => void
      off: (event: string, callback: (...args: any[]) => void) => void
    }
  }
  var alt: {
    emit: (event: string, ...args: any[]) => void
    on: (event: string, callback: (...args: any[]) => void) => void
    off: (event: string, callback: (...args: any[]) => void) => void
  } | undefined
}

type WeaponSliderDef = {
  key: string
  label: string
  min: number
  max: number
  step: number
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä—É–∂–∏—è –∏–∑ weapons.meta
const WEAPON_SLIDERS: WeaponSliderDef[] = [
  // –£—Ä–æ–Ω –∏ —Å–∏–ª–∞
  { key: 'damage', label: '–£—Ä–æ–Ω', min: 0, max: 500, step: 1 },
  { key: 'force', label: '–°–∏–ª–∞ –æ—Ç–¥–∞—á–∏', min: 0, max: 500, step: 5 },
  { key: 'forceHitPed', label: '–°–∏–ª–∞ —É–¥–∞—Ä–∞ (–ª—é–¥–∏)', min: 0, max: 1000, step: 10 },
  { key: 'forceHitVehicle', label: '–°–∏–ª–∞ —É–¥–∞—Ä–∞ (—Ç—Ä-—Ç—ã)', min: 0, max: 2000, step: 50 },
  
  // –¢–æ—á–Ω–æ—Å—Ç—å –∏ –æ—Ç–¥–∞—á–∞
  { key: 'accuracySpread', label: '–†–∞–∑–±—Ä–æ—Å', min: 0, max: 10, step: 0.1 },
  { key: 'recoilAccuracyMax', label: '–ú–∞–∫—Å. –æ—Ç–¥–∞—á–∞', min: 0, max: 5, step: 0.05 },
  { key: 'recoilErrorTime', label: '–í—Ä–µ–º—è –æ—à–∏–±–∫–∏ –æ—Ç–¥–∞—á–∏', min: 0, max: 10, step: 0.1 },
  { key: 'recoilRecoveryRate', label: '–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', min: 0, max: 5, step: 0.05 },
  
  // –ú–∞–≥–∞–∑–∏–Ω –∏ —Å–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å
  { key: 'clipSize', label: '–†–∞–∑–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞', min: 1, max: 200, step: 1 },
  { key: 'timeBetweenShots', label: '–í—Ä–µ–º—è –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏ (–º—Å)', min: 0, max: 2000, step: 10 },
  { key: 'bulletsInBatch', label: '–ü—É–ª—å –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª', min: 1, max: 50, step: 1 },
  
  // –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞
  { key: 'reloadTimeMP', label: '–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ MP', min: 100, max: 10000, step: 100 },
  { key: 'reloadTimeSP', label: '–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ SP', min: 100, max: 10000, step: 100 },
  { key: 'animReloadTime', label: '–í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏', min: 100, max: 10000, step: 100 },
  
  // –°–∫–æ—Ä–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å
  { key: 'speed', label: '–°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏', min: 100, max: 5000, step: 50 },
  { key: 'range', label: '–î–∞–ª—å–Ω–æ—Å—Ç—å', min: 10, max: 1000, step: 10 },
  
  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Ä–æ–Ω–∞
  { key: 'networkPlayerDamageModifier', label: '–ú–æ–¥. —É—Ä–æ–Ω–∞ (–∏–≥—Ä–æ–∫–∏)', min: 0, max: 5, step: 0.05 },
  { key: 'networkPedDamageModifier', label: '–ú–æ–¥. —É—Ä–æ–Ω–∞ (NPC)', min: 0, max: 5, step: 0.05 },
]

// Mapping from slider key to XML tag (camelCase -> PascalCase)
const sliderKeyToXmlTag: Record<string, string> = {
  damage: 'Damage',
  force: 'Force',
  forceHitPed: 'ForceHitPed',
  forceHitVehicle: 'ForceHitVehicle',
  accuracySpread: 'AccuracySpread',
  recoilAccuracyMax: 'RecoilAccuracyMax',
  recoilErrorTime: 'RecoilErrorTime',
  recoilRecoveryRate: 'RecoilRecoveryRate',
  clipSize: 'ClipSize',
  timeBetweenShots: 'TimeBetweenShots',
  bulletsInBatch: 'BulletsInBatch',
  reloadTimeMP: 'ReloadTimeMP',
  reloadTimeSP: 'ReloadTimeSP',
  animReloadTime: 'AnimReloadTime',
  speed: 'Speed',
  range: 'Range',
  networkPlayerDamageModifier: 'NetworkPlayerDamageModifier',
  networkPedDamageModifier: 'NetworkPedDamageModifier',
}

// Helper function to parse weapon XML and extract values
function parseWeaponXml(xml: string): Record<string, number> {
  const values: Record<string, number> = {}
  if (!xml) return values
  
  try {
    const parser = new DOMParser()
    const doc = parser.parseFromString(xml, 'text/xml')
    
    for (const [sliderKey, xmlTag] of Object.entries(sliderKeyToXmlTag)) {
      const element = doc.querySelector(xmlTag)
      if (element) {
        const valueAttr = element.getAttribute('value')
        if (valueAttr) {
          values[sliderKey] = parseFloat(valueAttr)
        }
      }
    }
  } catch (error) {
    console.error('[WeaponTuningSliders] Error parsing weapon XML:', error)
  }
  
  return values
}

interface WeaponTuningSlidersProps {
  onChange: (param: string, value: number) => void
  onReset: () => void
  onXmlPatch?: (param: string, value: number) => void
  disabled?: boolean
  initialValues?: string // XML string
  weaponKey?: string
  currentXml?: string
  onFocusModeToggle?: () => void
  focusMode?: boolean
}

const WeaponTuningSliders: React.FC<WeaponTuningSlidersProps> = ({
  onChange,
  onReset,
  onXmlPatch,
  disabled,
  initialValues,
  weaponKey,
  currentXml,
  onFocusModeToggle,
  focusMode
}) => {
  const [values, setValues] = useState<Record<string, number>>({})
  const [saveMode, setSaveMode] = useState<'local' | 'remote'>('local')

  const handleFocusToggle = () => {
    if (onFocusModeToggle) {
      (window as any).__focusMode = focusMode ? 'off' : 'weapon'
      window.dispatchEvent(new Event('focusModeChanged'))
      onFocusModeToggle()
    }
  }

  // Parse initial values from XML
  useEffect(() => {
    if (initialValues) {
      const parsed = parseWeaponXml(initialValues)
      setValues(parsed)
    } else if (currentXml) {
      const parsed = parseWeaponXml(currentXml)
      setValues(parsed)
    }
  }, [initialValues, currentXml, weaponKey])

  const handleSliderChange = (key: string, value: number) => {
    setValues(prev => ({ ...prev, [key]: value }))
    onChange(key, value)
    if (onXmlPatch) {
      onXmlPatch(key, value)
    }
  }

  const handleReset = () => {
    onReset()
    toast.success('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã')
  }

  const handleSave = () => {
    if (saveMode === 'local') {
      handleSaveLocal()
    } else {
      handleSaveRemote()
    }
  }

  const handleSaveLocal = () => {
    if (!currentXml || !weaponKey) {
      console.warn('[WeaponTuningSliders] No XML to save')
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      return
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ AltV WebView
      if (typeof window !== 'undefined' && 'alt' in window) {
        const eventData = {
          weaponName: weaponKey,
          xmlContent: currentXml
        }
        
        console.log('[WeaponTuningSliders] üîç Checking alt availability...')
        console.log('[WeaponTuningSliders] Data to send:', eventData.weaponName, 'XML length:', eventData.xmlContent.length)
        
        // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Å–ø–æ—Å–æ–±–∞
        let sent = false
        
        // –°–ø–æ—Å–æ–± 1: –ì–ª–æ–±–∞–ª—å–Ω—ã–π alt
        // @ts-ignore
        if (typeof alt !== 'undefined' && typeof alt.emit === 'function') {
          console.log('[WeaponTuningSliders] ‚úÖ Using global alt.emit')
          // @ts-ignore
          alt.emit('meshhub:weapon:save:meta', eventData)
          sent = true
        }
        
        // –°–ø–æ—Å–æ–± 2: window.alt (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        if (typeof (window as any).alt !== 'undefined' && typeof (window as any).alt.emit === 'function') {
          console.log('[WeaponTuningSliders] ‚úÖ Using window.alt.emit')
          ;(window as any).alt.emit('meshhub:weapon:save:meta', eventData)
          sent = true
        }
        
        if (sent) {
          console.log('[WeaponTuningSliders] ‚úÖ Event sent successfully')
          toast.success('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
          return
        } else {
          console.error('[WeaponTuningSliders] ‚ùå alt.emit –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
          toast.error('–û—à–∏–±–∫–∞: WebView –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ AltV')
          return
        }
      }

      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      const blob = new Blob([currentXml], { type: 'application/xml' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${weaponKey}_weapon.meta`
      a.style.display = 'none'
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      toast.success(`–§–∞–π–ª ${weaponKey}_weapon.meta —Å–æ—Ö—Ä–∞–Ω—ë–Ω`)
    } catch (err) {
      console.error('[WeaponTuningSliders] Save failed:', err)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
    }
  }

  const handleSaveRemote = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('[WeaponTuningSliders] Save to remote (not implemented yet)')
    toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', {
      icon: 'üöÄ',
      duration: 4000,
    })
  }

  return (
    <div className="space-y-3 weapon-tuning-panel">
      {/* –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å–≤–µ—Ä—Ö—É */}
      <div className="flex items-center justify-between gap-2 pb-3 border-b border-base-700">
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —Å–ø–∞–≤–Ω–∞ –ø–µ–¥–∞, —Å–±—Ä–æ—Å–∞ –∏ —Ñ–æ–∫—É—Å–∞ */}
        <div className="flex items-center gap-2">
          <button
            onClick={() => {
              if (typeof window !== 'undefined' && window.alt) {
                window.alt.emit('weapon:spawn:ped', { frozen: true, distance: 20 })
                toast.success('–ü–µ–¥ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω –Ω–∞ 20 –º–µ—Ç—Ä–∞—Ö')
              }
            }}
            className="flex items-center gap-1.5 px-3 py-1.5 text-xs rounded-lg bg-base-800 border border-base-700 hover:bg-base-700 hover:border-purple-500/50 transition-all"
            title="–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ–¥–∞ –Ω–∞ 20 –º–µ—Ç—Ä–∞—Ö"
          >
            <User className="w-3.5 h-3.5 text-purple-400" />
            <span>–ü–µ–¥</span>
          </button>
          <button
            onClick={handleReset}
            disabled={disabled}
            className="flex items-center gap-1.5 px-3 py-1.5 text-xs rounded-lg bg-base-800 border border-base-700 hover:bg-base-700 hover:border-primary-500/50 disabled:opacity-50 transition-all group"
            title="–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
          >
            <RotateCcw className="w-3.5 h-3.5 group-hover:rotate-180 transition-transform duration-300" />
            <span>–°–±—Ä–æ—Å–∏—Ç—å</span>
          </button>
          
          {onFocusModeToggle && (
            <button
              onClick={handleFocusToggle}
              className="flex items-center gap-1.5 px-3 py-1.5 text-xs rounded-lg bg-base-800 border border-base-700 hover:bg-base-700 hover:border-purple-500/50 transition-all"
              title={focusMode ? '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' : '–°–∫—Ä—ã—Ç—å –º–µ–Ω—é'}
            >
              {focusMode ? (
                <>
                  <Minimize2 className="w-3.5 h-3.5 text-cyan-400" />
                  <span>–í—ã—Ö–æ–¥</span>
                </>
              ) : (
                <>
                  <Maximize2 className="w-3.5 h-3.5 text-purple-400" />
                  <span>–§–æ–∫—É—Å</span>
                </>
              )}
            </button>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <div className="flex items-center gap-2">
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
          <div className="flex items-center bg-base-800 border border-base-700 rounded-lg p-0.5">
            <button
              onClick={() => setSaveMode('local')}
              className={`flex items-center gap-1 px-2 py-1 text-xs rounded transition-all ${
                saveMode === 'local'
                  ? 'bg-primary-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              <HardDrive className="w-3 h-3" />
              <span>–õ–æ–∫–∞–ª—å–Ω–æ</span>
            </button>
            <button
              onClick={() => setSaveMode('remote')}
              className={`flex items-center gap-1 px-2 py-1 text-xs rounded transition-all ${
                saveMode === 'remote'
                  ? 'bg-primary-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              <Cloud className="w-3 h-3" />
              <span>–£–¥–∞–ª—ë–Ω–Ω–æ</span>
            </button>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
          <button
            onClick={handleSave}
            disabled={disabled}
            className="flex items-center gap-1.5 px-3 py-1.5 text-xs rounded-lg bg-gradient-to-r from-primary-600 to-fuchsia-600 hover:from-primary-500 hover:to-fuchsia-500 text-white disabled:opacity-50 transition-all"
          >
            <Save className="w-3.5 h-3.5" />
            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
          </button>
        </div>
      </div>

      {/* –°–µ—Ç–∫–∞ —Å–ª–∞–π–¥–µ—Ä–æ–≤ */}
      <div className="grid grid-cols-2 gap-4">
        {WEAPON_SLIDERS.map(slider => {
          const value = values[slider.key] ?? slider.min

          return (
            <div 
              key={slider.key} 
              className="text-xs text-gray-300"
            >
              <div className="flex items-center justify-between mb-1">
                <span>{slider.label}</span>
                <span className="text-gray-400">
                  {value.toFixed(2)}
                </span>
              </div>
              <input
                type="range"
                min={slider.min}
                max={slider.max}
                step={slider.step}
                value={value}
                onChange={(e) => handleSliderChange(slider.key, parseFloat(e.target.value))}
                className="w-full brand-range"
                disabled={disabled}
              />
            </div>
          )
        })}
      </div>

      {/* Info */}
      <div className="mt-4 p-3 bg-base-800 rounded-lg border border-base-700">
        <div className="text-xs text-gray-400">
          {disabled
            ? '‚ö†Ô∏è –í–æ–∑—å–º–∏—Ç–µ –æ—Ä—É–∂–∏–µ –≤ —Ä—É–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
            : '‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'}
        </div>
      </div>
      
      <style>{`
        .weapon-tuning-panel .brand-range {
          -webkit-appearance: none;
          height: 6px;
          background: linear-gradient(90deg, rgba(99,102,241,.4), rgba(147,51,234,.4));
          border-radius: 9999px;
          outline: none;
        }
        .weapon-tuning-panel .brand-range::-webkit-slider-thumb {
          -webkit-appearance: none;
          width: 14px; height: 14px; border-radius: 9999px;
          background: #8b5cf6; border: 2px solid #3b82f6;
          box-shadow: 0 0 0 3px rgba(59,130,246,.25);
        }
        .weapon-tuning-panel .brand-range::-moz-range-thumb {
          width: 14px; height: 14px; border-radius: 9999px;
          background: #8b5cf6; border: 2px solid #3b82f6;
        }
      `}</style>
    </div>
  )
}

export default WeaponTuningSliders



