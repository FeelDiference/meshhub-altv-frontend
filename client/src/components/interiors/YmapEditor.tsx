/**
 * YMAP XML Editor Component
 * Monaco —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YMAP —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
 */

import { useState } from 'react'
import { Copy, Check, Save, Map } from 'lucide-react'
import toast from 'react-hot-toast'
import MonacoXMLEditor from '@/components/common/MonacoXMLEditor'

interface YmapEditorProps {
  xml: string
  onXmlChange?: (xml: string) => void
  interiorName?: string
  highlightedParam?: string
}

export function YmapEditor({ xml, onXmlChange, interiorName, highlightedParam }: YmapEditorProps) {
  const [copied, setCopied] = useState(false)
  
  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å XML –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(xml)
      setCopied(true)
      toast.success('YMAP XML —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('[YmapEditor] Failed to copy:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å XML')
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å YMAP –ª–æ–∫–∞–ª—å–Ω–æ (–º–æ–∫–∞–ø - –≤ –±—É–¥—É—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
   */
  const handleSave = () => {
    if (!xml || !interiorName) {
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      return
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ AltV WebView
      if (typeof window !== 'undefined' && 'alt' in window) {
        const eventData = {
          interiorName: interiorName,
          ymapContent: xml
        }
        
        console.log('[YmapEditor] Sending save request to Alt:V...')
        
        // @ts-ignore
        if (typeof alt !== 'undefined' && typeof alt.emit === 'function') {
          // @ts-ignore
          alt.emit('meshhub:interior:save:ymap', eventData)
          toast.success('YMAP —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
          return
        }
        
        if (typeof (window as any).alt !== 'undefined' && typeof (window as any).alt.emit === 'function') {
          ;(window as any).alt.emit('meshhub:interior:save:ymap', eventData)
          toast.success('YMAP —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
          return
        }
        
        console.error('[YmapEditor] alt.emit –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
        toast.error('–û—à–∏–±–∫–∞: WebView –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ AltV')
        return
      }
      
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      const blob = new Blob([xml], { type: 'application/xml' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${interiorName}.ymap`
      a.style.display = 'none'
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      toast.success(`–§–∞–π–ª ${interiorName}.ymap —Å–æ—Ö—Ä–∞–Ω—ë–Ω`)
    } catch (err) {
      console.error('[YmapEditor] Save failed:', err)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
    }
  }
  
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <Map className="w-4 h-4 text-blue-400" />
          <div className="text-sm font-semibold text-white">.ymap XML</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* Copy button */}
          <button
            onClick={handleCopy}
            className="flex items-center space-x-2 px-3 py-1.5 bg-base-800 hover:bg-base-700 text-gray-300 rounded transition-colors text-xs"
          >
            {copied ? (
              <>
                <Check className="w-3 h-3" />
                <span>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</span>
              </>
            ) : (
              <>
                <Copy className="w-3 h-3" />
                <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
              </>
            )}
          </button>
          
          {/* Save button */}
          <button
            onClick={handleSave}
            className="flex items-center space-x-2 px-3 py-1.5 bg-gradient-to-r from-primary-600 to-blue-600 hover:from-primary-500 hover:to-blue-500 text-white rounded transition-all text-xs"
          >
            <Save className="w-3 h-3" />
            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
          </button>
        </div>
      </div>
      
      {/* Monaco XML Editor */}
      <div className="flex-1 overflow-hidden rounded-lg border border-base-700 bg-base-950">
        {xml && xml.trim() ? (
          <MonacoXMLEditor 
            value={xml}
            onChange={(newXml) => onXmlChange?.(newXml)}
            highlightedParam={highlightedParam}
            height="100%"
          />
        ) : (
          <div className="flex items-center justify-center h-full text-center">
            <div>
              <Map className="w-12 h-12 text-gray-600 mx-auto mb-3" />
              <div className="text-lg font-semibold text-gray-400 mb-2">
                YMAP —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
              </div>
              <div className="text-sm text-gray-500">
                –î–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç YMAP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Info */}
      <div className="mt-3 p-3 bg-base-800 rounded-lg border border-base-700">
        <div className="text-xs text-gray-400">
          üí° YMAP —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∏—Ä–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤—Ä–∞—â–µ–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±)
        </div>
      </div>
    </div>
  )
}

export default YmapEditor
