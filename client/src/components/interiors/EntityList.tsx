/**
 * Entity List Component
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö entity –∏–∑ YTYP —Ñ–∞–π–ª–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
 */

import { useMemo, useState } from 'react'
import { MapPin, FileCode, Package, ChevronDown, ChevronRight, Box, Layers } from 'lucide-react'
import toast from 'react-hot-toast'
import type { YtypEntity } from '@/types/interior'
import { parseYtypEntities, parseYtypRooms, parseYtypPortals, parseYtypEntitySetsWithEntities } from '@/data/interior-mock'

interface EntityListProps {
  ytypXml: string
  onHighlightEntity?: (archetypeName: string) => void
  interiorName?: string
  entitySetMappings?: Record<string, string> // –ú–∞–ø–ø–∏–Ω–≥–∏ hash_***** ‚Üí realName
}

export function EntityList({ ytypXml, onHighlightEntity, interiorName, entitySetMappings = {} }: EntityListProps) {
  const [expandedRooms, setExpandedRooms] = useState<Set<string>>(new Set())
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è entity set (—Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞)
   */
  const getEntitySetDisplayName = (name: string): string => {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ö—ç—à –∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è
    if (name.startsWith('hash_') && entitySetMappings[name]) {
      return entitySetMappings[name]
    }
    return name
  }
  
  // –ü–∞—Ä—Å–∏–º entity –∏ rooms –∏–∑ YTYP XML
  const entities = useMemo(() => {
    if (!ytypXml) return []
    return parseYtypEntities(ytypXml)
  }, [ytypXml])
  
  const rooms = useMemo(() => {
    if (!ytypXml) return []
    return parseYtypRooms(ytypXml)
  }, [ytypXml])
  
  const portals = useMemo(() => {
    if (!ytypXml) return []
    return parseYtypPortals(ytypXml)
  }, [ytypXml])
  
  const entitySetsData = useMemo(() => {
    if (!ytypXml) return []
    return parseYtypEntitySetsWithEntities(ytypXml)
  }, [ytypXml])
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º entities –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
  const roomsWithEntities = useMemo(() => {
    return rooms.map(room => ({
      ...room,
      entities: room.attachedObjects
        .map(index => entities.find(e => e.index === index))
        .filter((e): e is YtypEntity => e !== undefined)
    }))
  }, [rooms, entities])
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º entities –ø–æ –ø–æ—Ä—Ç–∞–ª–∞–º
  const portalsWithEntities = useMemo(() => {
    return portals.map(portal => ({
      ...portal,
      entities: portal.attachedObjects
        .map(index => entities.find(e => e.index === index))
        .filter((e): e is YtypEntity => e !== undefined)
    }))
  }, [portals, entities])
  
  // Entities –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ (–Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö, –ø–æ—Ä—Ç–∞–ª–∞—Ö –∏ entity sets)
  const entitiesWithoutRoom = useMemo(() => {
    const usedIndices = new Set([
      ...rooms.flatMap(r => r.attachedObjects),
      ...portals.flatMap(p => p.attachedObjects)
    ])
    
    // –¢–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º entities –∏–∑ entity sets (–æ–Ω–∏ –∏–º–µ—é—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ entities, –Ω–µ –∏–Ω–¥–µ–∫—Å—ã)
    const entitySetArchetypes = new Set(
      entitySetsData.flatMap(es => es.entities.map(e => e.archetypeName))
    )
    
    return entities.filter(e => 
      e.index !== undefined && 
      !usedIndices.has(e.index) &&
      !entitySetArchetypes.has(e.archetypeName)
    )
  }, [entities, rooms, portals, entitySetsData])
  
  /**
   * –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ entity (–≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞)
   */
  const handleTeleport = (entity: YtypEntity) => {
    if (typeof window !== 'undefined' && 'alt' in window && (window as any).alt) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
      ;(window as any).alt.emit('meshhub:interior:entity:teleport', {
        interiorName,
        archetypeName: entity.archetypeName,
        localPosition: entity.position // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ YTYP
      })
      toast.success(`–¢–µ–ª–µ–ø–æ—Ä—Ç –∫ ${entity.archetypeName}`)
    } else {
      toast(`–¢–µ–ª–µ–ø–æ—Ä—Ç –∫ ${entity.archetypeName} (–º–æ–∫–∞–ø)`, { icon: 'üìç' })
    }
  }
  
  /**
   * –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å entity –≤ XML —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫ –Ω–µ–º—É
   */
  const handleHighlight = (archetypeName: string) => {
    if (onHighlightEntity) {
      // –ü–µ—Ä–µ–¥–∞–µ–º archetypeName –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      // –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –µ–≥–æ –∫–∞–∫ highlightedParam –¥–ª—è MonacoEditor
      onHighlightEntity(archetypeName)
    }
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã
   */
  const toggleRoom = (roomName: string) => {
    setExpandedRooms(prev => {
      const newSet = new Set(prev)
      if (newSet.has(roomName)) {
        newSet.delete(roomName)
      } else {
        newSet.add(roomName)
      }
      return newSet
    })
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  const getRoomName = (roomIndex: number): string => {
    return rooms[roomIndex]?.name || `Room ${roomIndex}`
  }
  
  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ entity
  const renderEntity = (entity: YtypEntity, index: number) => (
    <div
      key={`${entity.archetypeName}-${index}`}
      className="bg-base-800/50 border border-base-700 rounded-lg hover:border-base-600 transition-colors p-2"
    >
      <div className="flex items-center justify-between mb-1.5">
        <div className="flex-1 min-w-0">
          <div className="text-xs font-medium text-white truncate">
            {entity.archetypeName}
          </div>
          <div className="text-xs text-gray-500">
            LOD: {entity.lodDist?.toFixed(1) || '?'}m
          </div>
        </div>
      </div>
      
      {/* –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
      <div className="text-xs text-gray-400 mb-2">
        X: {entity.position.x.toFixed(2)}, 
        Y: {entity.position.y.toFixed(2)}, 
        Z: {entity.position.z.toFixed(2)}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex items-center space-x-1">
        {/* –¢–µ–ª–µ–ø–æ—Ä—Ç */}
        <button
          onClick={() => handleTeleport(entity)}
          className="flex-1 flex items-center justify-center space-x-1 px-2 py-1.5 bg-green-600/20 border border-green-500/50 hover:bg-green-600/30 text-green-300 rounded text-xs transition-all"
          title="–¢–µ–ª–µ–ø–æ—Ä—Ç –∫ entity"
        >
          <MapPin className="w-3 h-3" />
          <span>–¢–µ–ª–µ–ø–æ—Ä—Ç</span>
        </button>
        
        {/* Highlight –≤ XML */}
        <button
          onClick={() => handleHighlight(entity.archetypeName)}
          className="flex-1 flex items-center justify-center space-x-1 px-2 py-1.5 bg-blue-600/20 border border-blue-500/50 hover:bg-blue-600/30 text-blue-300 rounded text-xs transition-all"
          title="–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –≤ XML"
        >
          <FileCode className="w-3 h-3" />
          <span>XML</span>
        </button>
      </div>
    </div>
  )
  
  if (!ytypXml || entities.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-8">
        <Package className="w-12 h-12 text-gray-600 mb-3" />
        <div className="text-lg font-semibold text-gray-400 mb-2">
          –ù–µ—Ç entity
        </div>
        <div className="text-sm text-gray-500">
          YTYP —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        </div>
      </div>
    )
  }
  
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <Package className="w-4 h-4 text-green-400" />
          <div className="text-sm font-semibold text-white">
            Entity ({entities.length}) ‚Ä¢ –ö–æ–º–Ω–∞—Ç ({rooms.length}) ‚Ä¢ –ü–æ—Ä—Ç–∞–ª–æ–≤ ({portals.length}) ‚Ä¢ Entity Sets ({entitySetsData.length})
          </div>
        </div>
      </div>
      
      {/* Entity List —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º */}
      <div className="flex-1 overflow-y-auto space-y-3 pr-1">
        {/* –°–µ–∫—Ü–∏—è: –ö–æ–º–Ω–∞—Ç—ã */}
        {roomsWithEntities.length > 0 && (
          <div className="space-y-2">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –ö–æ–º–Ω–∞—Ç—ã */}
            <div className="flex items-center space-x-2 py-2 px-3 bg-base-800/30 border-l-4 border-yellow-500 rounded">
              <Box className="w-5 h-5 text-yellow-400" />
              <div className="text-base font-bold text-yellow-300">
                –ö–æ–º–Ω–∞—Ç—ã ({rooms.length})
              </div>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç */}
            {roomsWithEntities.map((room, roomIndex) => {
          const isRoomExpanded = expandedRooms.has(room.name)
          
          return (
            <div
              key={`room-${roomIndex}`}
              className="bg-base-900/50 border border-base-600 rounded-lg overflow-hidden"
            >
              {/* Room Header (Collapsible) */}
              <button
                onClick={() => toggleRoom(room.name)}
                className="w-full flex items-center justify-between p-3 hover:bg-base-800/50 transition-colors text-left"
              >
                <div className="flex items-center space-x-2">
                  <Box className="w-4 h-4 text-yellow-400 flex-shrink-0" />
                  <div>
                    <div className="text-sm font-semibold text-white">
                      {room.name}
                    </div>
                    <div className="text-xs text-gray-500">
                      {room.entities.length} objects
                    </div>
                  </div>
                </div>
                {isRoomExpanded ? (
                  <ChevronDown className="w-4 h-4 text-gray-400 flex-shrink-0" />
                ) : (
                  <ChevronRight className="w-4 h-4 text-gray-400 flex-shrink-0" />
                )}
              </button>
              
              {/* Room Entities (Collapsible) */}
              {isRoomExpanded && (
                <div className="p-2 space-y-2 border-t border-base-700">
                  {room.entities.map((entity, idx) => renderEntity(entity, idx))}
                </div>
              )}
            </div>
          )
            })}
          </div>
        )}
        
        {/* –°–µ–∫—Ü–∏—è: –ü–æ—Ä—Ç–∞–ª—ã */}
        {portalsWithEntities.length > 0 && (
          <div className="space-y-2">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –ü–æ—Ä—Ç–∞–ª—ã */}
            <div className="flex items-center space-x-2 py-2 px-3 bg-base-800/30 border-l-4 border-purple-500 rounded mt-4">
              <div className="text-xl">üö™</div>
              <div className="text-base font-bold text-purple-300">
                –ü–æ—Ä—Ç–∞–ª—ã ({portals.length})
              </div>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–∞–ª–æ–≤ */}
            {portalsWithEntities.map((portal, portalIndex) => {
              const portalKey = `portal-${portalIndex}`
              const isPortalExpanded = expandedRooms.has(portalKey)
              
              return (
                <div
                  key={portalKey}
                  className="bg-base-900/50 border border-purple-600/50 rounded-lg overflow-hidden"
                >
                  {/* Portal Header (Collapsible) */}
                  <button
                    onClick={() => toggleRoom(portalKey)}
                    className="w-full flex items-center justify-between p-3 hover:bg-purple-900/20 transition-colors text-left"
                  >
                    <div className="flex items-center space-x-2">
                      <div className="text-lg">üö™</div>
                      <div>
                        <div className="text-sm font-semibold text-purple-300">
                          Portal: {getRoomName(portal.roomFrom)} ‚Üí {getRoomName(portal.roomTo)}
                        </div>
                        <div className="text-xs text-purple-400">
                          {portal.entities.length} objects
                        </div>
                      </div>
                    </div>
                    {isPortalExpanded ? (
                      <ChevronDown className="w-4 h-4 text-purple-400 flex-shrink-0" />
                    ) : (
                      <ChevronRight className="w-4 h-4 text-purple-400 flex-shrink-0" />
                    )}
                  </button>
                  
                  {/* Portal Entities (Collapsible) */}
                  {isPortalExpanded && (
                    <div className="p-2 space-y-2 border-t border-purple-700/50">
                      {portal.entities.map((entity, idx) => renderEntity(entity, idx))}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        )}
        
        {/* –°–µ–∫—Ü–∏—è: Entity Sets */}
        {entitySetsData.length > 0 && (
          <div className="space-y-2">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ Entity Sets */}
            <div className="flex items-center space-x-2 py-2 px-3 bg-base-800/30 border-l-4 border-blue-500 rounded mt-4">
              <Layers className="w-5 h-5 text-blue-400" />
              <div className="text-base font-bold text-blue-300">
                Entity Sets ({entitySetsData.length})
              </div>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ Entity Sets */}
            {entitySetsData.map((entitySet, setIndex) => {
              const setKey = `entityset-${setIndex}`
              const isSetExpanded = expandedRooms.has(setKey)
              const displayName = getEntitySetDisplayName(entitySet.name)
              const isHash = entitySet.name.startsWith('hash_')
              const hasMapp = isHash && entitySetMappings[entitySet.name] !== undefined
              
              return (
                <div
                  key={setKey}
                  className="bg-base-900/50 border border-blue-600/50 rounded-lg overflow-hidden"
                >
                  {/* Entity Set Header (Collapsible) */}
                  <button
                    onClick={() => toggleRoom(setKey)}
                    className="w-full flex items-center justify-between p-3 hover:bg-blue-900/20 transition-colors text-left"
                  >
                    <div className="flex items-center space-x-2">
                      <Layers className="w-4 h-4 text-blue-400 flex-shrink-0" />
                      <div>
                        <div className="text-sm font-semibold text-blue-300">
                          {displayName}
                        </div>
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥ */}
                        {hasMapp && (
                          <div className="text-xs text-gray-600 mt-0.5">
                            {entitySet.name}
                          </div>
                        )}
                        <div className="text-xs text-blue-400">
                          {entitySet.entities.length} objects
                        </div>
                      </div>
                    </div>
                    {isSetExpanded ? (
                      <ChevronDown className="w-4 h-4 text-blue-400 flex-shrink-0" />
                    ) : (
                      <ChevronRight className="w-4 h-4 text-blue-400 flex-shrink-0" />
                    )}
                  </button>
                  
                  {/* Entity Set Entities (Collapsible) */}
                  {isSetExpanded && (
                    <div className="p-2 space-y-2 border-t border-blue-700/50">
                      {entitySet.entities.map((entity, idx) => renderEntity(entity, idx))}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        )}
        
        {/* –°–µ–∫—Ü–∏—è: Entities –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ */}
        {entitiesWithoutRoom.length > 0 && (
          <div className="space-y-2">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ */}
            <div className="flex items-center space-x-2 py-2 px-3 bg-base-800/30 border-l-4 border-gray-600 rounded mt-4">
              <Package className="w-5 h-5 text-gray-400" />
              <div className="text-base font-bold text-gray-300">
                –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ ({entitiesWithoutRoom.length})
              </div>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ entities */}
            <div className="space-y-2">
              {entitiesWithoutRoom.map((entity, idx) => renderEntity(entity, idx))}
            </div>
          </div>
        )}
      </div>
      
      {/* Info */}
      <div className="mt-3 p-3 bg-base-800 rounded-lg border border-base-700">
        <div className="text-xs text-gray-400">
          üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å
        </div>
      </div>
    </div>
  )
}

export default EntityList
