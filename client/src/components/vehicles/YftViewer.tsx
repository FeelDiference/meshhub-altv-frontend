/**
 * YFT 3D Viewer Component
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 3D –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ wireframe —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É—è Three.js
 */

import React, { useState, useEffect, Suspense, useRef } from 'react'
import { Canvas, useThree } from '@react-three/fiber'
import { OrbitControls, PerspectiveCamera, Grid as ThreeGrid } from '@react-three/drei'
import * as THREE from 'three'
import { X, RotateCcw, Eye, Box, Grid as GridIcon, Database, Trash2 } from 'lucide-react'
import toast from 'react-hot-toast'
import { 
  transformSyncDataForThreeJS, 
  CameraSyncSmoother,
  type CameraSyncData,
  type Vec3,
  YFT_NORMAL_VIEW_ROTATION
} from '@/utils/coordinateTransform'
import { useYFTCache } from '@/hooks/useYFTCache'
import { YFTCache } from '@/utils/yftCache'

interface YftViewerProps {
  vehicleName: string
  onClose: () => void
  onGameViewChange?: (active: boolean) => void
}

interface MeshData {
  vertices: number[] // [x, y, z, x, y, z, ...]
  indices: number[]  // [i1, i2, i3, i1, i2, i3, ...]
  bounds?: {
    min: { x: number; y: number; z: number }
    max: { x: number; y: number; z: number }
  }
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3D –º–æ–¥–µ–ª–∏ —Å wireframe
 */
function VehicleModel({ 
  meshData, 
  viewMode, 
  gameViewMode = false,
  vehicleRotation,
  showDebugAxes = false,
  calibration
}: { 
  meshData: MeshData
  viewMode: 'wireframe' | 'solid' | 'real'
  gameViewMode?: boolean
  vehicleRotation?: Vec3  // –í—Ä–∞—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤ Game View (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
  showDebugAxes?: boolean  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ debug –æ—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  calibration?: {
    modelRotation: { x: number; y: number; z: number }
    modelOffset: { x: number; y: number; z: number }
  }
}) {
  
  // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ mesh –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–µ–π (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!)
  const geometry = React.useMemo(() => {
    console.log('[YftViewer] üèóÔ∏è Building geometry...')
    const startTime = performance.now()
    
    const geo = new THREE.BufferGeometry()
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤–µ—Ä—à–∏–Ω –≤ Float32Array
    const vertices = new Float32Array(meshData.vertices)
    geo.setAttribute('position', new THREE.BufferAttribute(vertices, 3))
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (meshData.indices && meshData.indices.length > 0) {
      const indices = new Uint32Array(meshData.indices)
      geo.setIndex(new THREE.BufferAttribute(indices, 1))
    }
    
    // –í–ê–ñ–ù–û: –ù–ï –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏ –¥–ª—è wireframe - —ç—Ç–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ!
    // –î–ª—è solid mesh –Ω–æ—Ä–º–∞–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º flat shading
    
    const elapsed = performance.now() - startTime
    console.log(`[YftViewer] ‚úÖ Geometry built in ${elapsed.toFixed(0)}ms`)
    
    return geo
  }, [meshData])
  
  // –í—ã—á–∏—Å–ª—è–µ–º Bounding Box –∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—É
  // –í Game View —Ä–µ–∂–∏–º–µ –º–æ–¥–µ–ª—å –°–¢–†–û–ì–û –≤ —Ü–µ–Ω—Ç—Ä–µ (0, 0, 0) –±–µ–∑ offset (–∏–ª–∏ —Å –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–º offset)!
  const position: [number, number, number] = React.useMemo(() => {
    if (!geometry) return [0, 0, 0]
    
    // –í Game View —Ä–µ–∂–∏–º–µ - –º–æ–¥–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ + –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–π offset
    if (gameViewMode && calibration) {
      const offset = calibration.modelOffset
      return [offset.x, offset.y, offset.z]
    }
    
    if (gameViewMode) {
      return [0, 0, 0]
    }
    
    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ª—É –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    geometry.computeBoundingBox()
    const box = geometry.boundingBox!
    
    console.log('[YftViewer] üì¶ Original Bounding Box:', {
      min: { x: box.min.x, y: box.min.y, z: box.min.z },
      max: { x: box.max.x, y: box.max.y, z: box.max.z },
      size: { x: box.max.x - box.min.x, y: box.max.y - box.min.y, z: box.max.z - box.min.z }
    })
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç [Math.PI / 2, Math.PI, 0] = [90¬∞, 180¬∞, 0¬∞]
    // –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞ –ø–æ X: Y —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Z, Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è -Y
    // –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 180¬∞ –ø–æ Y: X —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è -X, Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è -Z
    
    // –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤:
    // newX = -oldX
    // newY = -oldZ  
    // newZ = -oldY
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
    const rotatedMinY = Math.min(
      -box.max.z,  // -oldZ (–∫–æ–≥–¥–∞ oldY = min)
      -box.min.z   // -oldZ (–∫–æ–≥–¥–∞ oldY = max)
    )
    
    console.log(`[YftViewer] üîÑ After rotation [90¬∞, 180¬∞, 0¬∞]: minY = ${rotatedMinY.toFixed(3)}`)
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
    const yOffset = -rotatedMinY
    console.log(`[YftViewer] ‚¨áÔ∏è Positioning at Y offset: ${yOffset.toFixed(3)}`)
    
    return [0, yOffset, 0]
  }, [geometry, gameViewMode, calibration])
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –†–ê–ó–ù–´–ï –¥–ª—è Normal –∏ Game View!
  const rotation: [number, number, number] = React.useMemo(() => {
    const DEG_TO_RAD = Math.PI / 180
    
    if (gameViewMode && vehicleRotation) {
      // –í Game View: –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç + –≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –∏–≥—Ä—ã (–ù–ê–ö–õ–û–ù–´!)
      const baseRot = calibration?.modelRotation || 
        { x: 90, y: 180, z: 180 } // –î–µ—Ñ–æ–ª—Ç –∏–∑ YFT_GAME_VIEW_ROTATION
      
      // –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –º–æ–¥–µ–ª–∏ (90¬∞X, 180¬∞Y, 180¬∞Z) –æ—Å–∏ GTA –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ—Å—è–º–∏ Three.js!
      // –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ (–ø–æ–º–µ–Ω—è–ª–∏ X –∏ Y –º–µ—Å—Ç–∞–º–∏):
      // GTA pitch (X - –ø—Ä–æ–¥–æ–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω –Ω–æ—Å –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑) ‚Üí Three.js Y (–∑–µ–ª–µ–Ω–∞—è)
      // GTA roll (Y - –∫—Ä–µ–Ω –ª–µ–≤–æ–µ/–ø—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ) ‚Üí Three.js X (–∫—Ä–∞—Å–Ω–∞—è)
      // GTA yaw (Z - –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö) ‚Üí Three.js Z (—Å–∏–Ω—è—è –æ—Å—å) ‚úÖ
      
      const finalRotation = [
        baseRot.x * DEG_TO_RAD - vehicleRotation.y * DEG_TO_RAD,  // X (–∫—Ä–∞—Å–Ω–∞—è): roll –º–∞—à–∏–Ω—ã (–∫—Ä–µ–Ω)
        baseRot.y * DEG_TO_RAD - vehicleRotation.x * DEG_TO_RAD,  // Y (–∑–µ–ª–µ–Ω–∞—è): -pitch –º–∞—à–∏–Ω—ã (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!)
        baseRot.z * DEG_TO_RAD + vehicleRotation.z * DEG_TO_RAD   // Z (—Å–∏–Ω—è—è): yaw –º–∞—à–∏–Ω—ã (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö) ‚úÖ
      ] as [number, number, number]
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const count = (window as any).__vehicleRotationAppliedCount || 0
      if (count < 3) {
        console.log('[YftViewer] üéØ Model rotation applied (FIXED AXES):',
          `GTA(pitch=${vehicleRotation.x.toFixed(1)}, roll=${vehicleRotation.y.toFixed(1)}, yaw=${vehicleRotation.z.toFixed(1)})`,
          `‚Üí Three.js(X=${(finalRotation[0] * 180 / Math.PI).toFixed(1)}, Y=${(finalRotation[1] * 180 / Math.PI).toFixed(1)}, Z=${(finalRotation[2] * 180 / Math.PI).toFixed(1)})`
        )
        ;(window as any).__vehicleRotationAppliedCount = count + 1
      }
      
      return finalRotation
    } else if (gameViewMode) {
      // Game View –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è - –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
      const baseRot = calibration?.modelRotation || 
        { x: 90, y: 180, z: 180 }
      
      return [
        baseRot.x * DEG_TO_RAD,
        baseRot.y * DEG_TO_RAD,
        baseRot.z * DEG_TO_RAD
      ]
    } else {
      // Normal View: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∫–æ–ª–µ—Å–∞—Ö)
      return YFT_NORMAL_VIEW_ROTATION
    }
  }, [gameViewMode, vehicleRotation, calibration])
  
  return (
    <group rotation={rotation} position={position}>
      {/* Wireframe —Ä–µ–∂–∏–º */}
      {viewMode === 'wireframe' && (
        <mesh geometry={geometry}>
          <meshBasicMaterial 
            color="#00ff00" 
            wireframe={true}
            transparent
            opacity={0.8}
          />
        </mesh>
      )}
      
      {/* Solid —Ä–µ–∂–∏–º */}
      {viewMode === 'solid' && (
        <mesh geometry={geometry}>
          <meshBasicMaterial 
            color="#3b82f6"
            side={THREE.DoubleSide}
          />
        </mesh>
      )}
      
      {/* Real —Ä–µ–∂–∏–º (wireframe + solid) */}
      {viewMode === 'real' && (
        <>
          <mesh geometry={geometry}>
            <meshBasicMaterial 
              color="#3b82f6"
              side={THREE.DoubleSide}
            />
          </mesh>
          <mesh geometry={geometry}>
            <meshBasicMaterial 
              color="#00ff00" 
              wireframe={true}
              transparent
              opacity={0.6}
            />
          </mesh>
        </>
      )}
      
      {/* Debug –æ—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ */}
      {showDebugAxes && (
        <axesHelper args={[5]} />
      )}
    </group>
  )
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã - –ø—Ä–∏–º–µ–Ω—è–µ—Ç sync –¥–∞–Ω–Ω—ã–µ –∫ Three.js –∫–∞–º–µ—Ä–µ
 */
function CameraSync({ 
  enabled, 
  cameraRef,
  calibration
}: { 
  enabled: boolean
  cameraRef: React.MutableRefObject<THREE.PerspectiveCamera | null>
  calibration: {
    cameraInvert: { x: boolean; y: boolean; z: boolean }
    baseFov: number
    fovMultiplier: number
    applyRoll: boolean
  }
}) {
  const { camera } = useThree()
  const smootherRef = useRef(new CameraSyncSmoother())
  const rafRef = useRef<number | null>(null)
  const lastSyncDataRef = useRef<any>(null)
  const logCounterRef = useRef(0) // –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  
  // –ë–∞–∑–æ–≤—ã–π FOV –∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–∑ –∏–≥—Ä—ã)
  const baseFov = calibration.baseFov
  
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–º–µ—Ä—É
    if (camera instanceof THREE.PerspectiveCamera) {
      cameraRef.current = camera
    }
  }, [camera, cameraRef])
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º FOV –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  useEffect(() => {
    if (enabled && cameraRef.current) {
      const finalFov = baseFov * calibration.fovMultiplier
      cameraRef.current.fov = finalFov
      cameraRef.current.updateProjectionMatrix()
      console.log('[CameraSync] üîç FOV updated:', finalFov.toFixed(1))
    }
  }, [enabled, baseFov, calibration.fovMultiplier])
  
  useEffect(() => {
    if (!enabled) {
      // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RAF
      if (rafRef.current) {
        cancelAnimationFrame(rafRef.current)
        rafRef.current = null
      }
      return
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç Alt:V
    const handleCameraSync = (syncData: CameraSyncData) => {
      lastSyncDataRef.current = syncData
      
      // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è)
      if (logCounterRef.current < 3) {
        console.log('[CameraSync] üì• Received sync data:', {
          camPos: syncData?.camera?.position,
          camRot: syncData?.camera?.rotation,
          vehRot: syncData?.vehicle?.rotation,
          debug: syncData?.debug
        })
        logCounterRef.current++
      }
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if ((window as any).alt) {
      ;(window as any).alt.on('yft-viewer:camera-sync:update', handleCameraSync)
      console.log('[CameraSync] ‚úÖ Subscribed to yft-viewer:camera-sync:update event')
    }
    
    // RAF —Ü–∏–∫–ª –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const animate = () => {
      if (!enabled || !cameraRef.current || !lastSyncDataRef.current) {
        rafRef.current = requestAnimationFrame(animate)
        return
      }
      
      try {
        const syncData = lastSyncDataRef.current
        
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GTA V –≤ Three.js –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π
        const transformed = transformSyncDataForThreeJS(syncData, calibration.cameraInvert)
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ position –∏ rotation)
        smootherRef.current.update(
          transformed.position,
          transformed.rotation
        )
        
        const smoothed = smootherRef.current.getCurrent()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–º–µ—Ä–µ
        const cam = cameraRef.current
        
        // 1. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        cam.position.set(smoothed.position.x, smoothed.position.y, smoothed.position.z)
        
        // 2. –í–ê–ñ–ù–û: –ö–∞–º–µ—Ä–∞ –í–°–ï–ì–î–ê —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏ (0, 0, 0)
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –º–æ–¥–µ–ª–∏
        // lookAt –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç pitch –∏ yaw
        cam.lookAt(0, 0, 0)
        
        // 3. –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º ROLL (–∫—Ä–µ–Ω –∫–∞–º–µ—Ä—ã –ø–æ –æ—Å–∏ Z)
        // Pitch –∏ Yaw —É–∂–µ –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ lookAt, –∞ roll –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é
        if (calibration.applyRoll) {
          cam.rotation.z = smoothed.rotation.z
        }
        
        // –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î:
        // - Position: –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –∏–≥—Ä—ã (–∫–∞–º–µ—Ä–∞ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ)
        // - Pitch/Yaw: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ lookAt(0,0,0) (–∫–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–æ–¥–µ–ª—å)
        // - Roll: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∫—Ä–µ–Ω–∞ –∫–∞–º–µ—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        // - FOV: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ useEffect –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        
        // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ –∑–∞–±–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å)
        if (logCounterRef.current < 3) {
          console.log('[CameraSync] üì∏ Applied to camera:', {
            rawData: {
              pos: [syncData.camera.position.x.toFixed(2), syncData.camera.position.y.toFixed(2), syncData.camera.position.z.toFixed(2)],
              rot: [syncData.camera.rotation.x.toFixed(1), syncData.camera.rotation.y.toFixed(1), syncData.camera.rotation.z.toFixed(1)]
            },
            transformed: {
              pos: [smoothed.position.x.toFixed(2), smoothed.position.y.toFixed(2), smoothed.position.z.toFixed(2)],
              rot: [smoothed.rotation.x.toFixed(2), smoothed.rotation.y.toFixed(2), smoothed.rotation.z.toFixed(2)]
            },
            camera: {
              position: [cam.position.x.toFixed(2), cam.position.y.toFixed(2), cam.position.z.toFixed(2)],
              fov: cam.fov.toFixed(1)
            },
            calibration: {
              invert: calibration.cameraInvert,
              fovMult: calibration.fovMultiplier
            }
          })
        }
        
      } catch (err) {
        console.error('[YftViewer] Error applying camera sync:', err)
      }
      
      rafRef.current = requestAnimationFrame(animate)
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º RAF
    rafRef.current = requestAnimationFrame(animate)
    
    // Cleanup
    return () => {
      if (rafRef.current) {
        cancelAnimationFrame(rafRef.current)
        rafRef.current = null
      }
      
      if ((window as any).alt) {
        ;(window as any).alt.off('yft-viewer:camera-sync:update', handleCameraSync)
        console.log('[CameraSync] ‚úÖ Unsubscribed from yft-viewer:camera-sync:update event')
      }
    }
  }, [enabled, cameraRef])
  
  return null // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ, —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–º–µ—Ä–æ–π
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç YFT Viewer
 */
export function YftViewer({ vehicleName, onClose, onGameViewChange }: YftViewerProps) {
  const [meshData, setMeshData] = useState<MeshData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [showGrid, setShowGrid] = useState(true)
  const [viewMode, setViewMode] = useState<'wireframe' | 'solid' | 'real'>('real')
  const [gameViewMode, setGameViewMode] = useState(false) // –†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∏–≥—Ä—É
  const [progress, setProgress] = useState<{ v: number; i: number; phase: 'idle' | 'start' | 'chunk' | 'end' }>(
    { v: 0, i: 0, phase: 'idle' }
  )
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ YFT –º–æ–¥–µ–ª–µ–π
  const { cacheStatus, loadFromCache, saveToCache, clearCache, refreshStats, isCacheAvailable } = useYFTCache()
  
  // Ref –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Three.js –∫–∞–º–µ—Ä–µ –∏–∑ CameraSync –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null)
  
  // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Game View
  const [debugInfo, setDebugInfo] = useState({
    cameraOffset: 0
  })
  
  // –í—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
  const [vehicleRotation, setVehicleRotation] = useState<{ x: number; y: number; z: number } | null>(null)
  
  // Debug –æ—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  const [showDebugAxes, setShowDebugAxes] = useState(false)
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (live –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
  const [calibration, setCalibration] = useState({
    modelRotation: { x: 90, y: 180, z: 180 }, // –í –≥—Ä–∞–¥—É—Å–∞—Ö
    cameraInvert: { x: false, y: false, z: false },
    modelOffset: { x: 0, y: -0.8, z: 0 }, // Y = -0.8 –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    baseFov: 50, // –ë–∞–∑–æ–≤—ã–π FOV (–Ω–µ –∏–∑ –∏–≥—Ä—ã, —Å—Ç–∞—Ç–∏—á–Ω—ã–π)
    fovMultiplier: 1.0,
    applyRoll: false // –ü—Ä–∏–º–µ–Ω—è—Ç—å roll (–∫—Ä–µ–Ω) –∫–∞–º–µ—Ä—ã
  })
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ mesh –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadMeshData()
  }, [vehicleName])
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã –æ—Ç Alt:V
  useEffect(() => {
    if (!gameViewMode) return
    
    const handleCameraSync = (syncData: any) => {
      // –í—ã—á–∏—Å–ª—è–µ–º offset –∫–∞–º–µ—Ä—ã –æ—Ç –º–∞—à–∏–Ω—ã –¥–ª—è debug UI
      const pos = syncData?.camera?.position
      if (pos) {
        const offset = Math.sqrt(pos.x * pos.x + pos.y * pos.y + pos.z * pos.z)
        setDebugInfo({ cameraOffset: offset })
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–∫–ª–æ–Ω–æ–≤ –º–æ–¥–µ–ª–∏
      if (syncData?.vehicle?.rotation) {
        setVehicleRotation(syncData.vehicle.rotation)
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)
        const count = (window as any).__vehicleRotationLogCount || 0
        if (count < 3) {
          console.log('[YftViewer] üîÑ Vehicle rotation received:', syncData.vehicle.rotation)
          ;(window as any).__vehicleRotationLogCount = count + 1
        }
      }
    }
    
    if ((window as any).alt) {
      ;(window as any).alt.on('yft-viewer:camera-sync:update', handleCameraSync)
    }
    
    return () => {
      if ((window as any).alt) {
        ;(window as any).alt.off('yft-viewer:camera-sync:update', handleCameraSync)
      }
    }
  }, [gameViewMode])
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ Game View
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && gameViewMode) {
        console.log('[YftViewer] ESC pressed in Game View - exiting...')
        setGameViewMode(false)
      }
    }
    
    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [gameViewMode])
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º App –æ —Å–º–µ–Ω–µ Game View —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (onGameViewChange) {
      onGameViewChange(gameViewMode)
    }
  }, [gameViewMode, onGameViewChange])
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  useEffect(() => {
    if (gameViewMode && cameraRef.current) {
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ RAF —Ü–∏–∫–ª–µ CameraSync
      console.log('[YftViewer] üîß Calibration changed:', {
        fovMultiplier: calibration.fovMultiplier,
        modelRotation: calibration.modelRotation,
        modelOffset: calibration.modelOffset,
        cameraInvert: calibration.cameraInvert,
        applyRoll: calibration.applyRoll
      })
    }
  }, [calibration, gameViewMode])

  // –£–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ–º UI –∏ –∫–∞–º–µ—Ä–æ–π –≤ Game View —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    if (gameViewMode) {
      // –í Game View —Ä–µ–∂–∏–º–µ - —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI
      const focusMode = 'game-view'
      ;(globalThis as any).__focusMode = focusMode
      ;(window as any).__focusMode = focusMode
      console.log(`[YftViewer] Set __focusMode = ${focusMode} (Game View ON)`)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CUSTOM EVENT –¥–ª—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ App
      window.dispatchEvent(new CustomEvent('focusModeChanged', { detail: { mode: focusMode } }))
      console.log(`[YftViewer] ‚úÖ Dispatched focusModeChanged event: ${focusMode}`)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Alt:V Client-side JS
      if ((window as any).alt) {
        ;(window as any).alt.emit('yft-viewer:focus-mode', { mode: focusMode })
        console.log(`[YftViewer] ‚úÖ Sent yft-viewer:focus-mode ${focusMode} to Alt:V Client`)
        
        // –ó–ê–ü–£–°–ö–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ –ö–ê–ú–ï–†–´
        ;(window as any).alt.emit('yft-viewer:camera:sync:start')
        console.log(`[YftViewer] üé• Started camera synchronization`)
      }
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ YftViewer - –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI
      console.log(`[YftViewer] Game View OFF - not changing focusMode`)
      
      // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ –ö–ê–ú–ï–†–´
      if ((window as any).alt) {
        ;(window as any).alt.emit('yft-viewer:camera:sync:stop')
        console.log(`[YftViewer] üõë Stopped camera synchronization`)
      }
    }
    
    const handleRightClick = (e: MouseEvent) => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ü–ö–ú, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤ Game View)
      if (!gameViewMode) {
        e.preventDefault()
        e.stopPropagation()
        return false
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
    document.addEventListener('contextmenu', handleRightClick, true) // capture phase
    document.addEventListener('mousedown', (e) => {
      if (e.button === 2 && !gameViewMode) { // –ü–ö–ú (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤ Game View)
        e.preventDefault()
        e.stopPropagation()
        return false
      }
    }, true) // capture phase
    
    return () => {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±—ã–ª –≤ Game View
      if (gameViewMode) {
        ;(globalThis as any).__focusMode = 'off'
        ;(window as any).__focusMode = 'off'
        console.log('[YftViewer] Reset __focusMode = off (Game View was ON)')
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CUSTOM EVENT –¥–ª—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ App
        window.dispatchEvent(new CustomEvent('focusModeChanged', { detail: { mode: 'off' } }))
        console.log('[YftViewer] ‚úÖ Dispatched focusModeChanged event: off')
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Alt:V Client-side JS
        if ((window as any).alt) {
          ;(window as any).alt.emit('yft-viewer:focus-mode', { mode: 'off' })
          console.log('[YftViewer] ‚úÖ Sent yft-viewer:focus-mode OFF to Alt:V Client')
        }
      }
      
      document.removeEventListener('contextmenu', handleRightClick, true)
      document.removeEventListener('mousedown', handleRightClick, true)
    }
  }, [gameViewMode])
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ mesh –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ALT:V ‚Üí C# CodeWalker —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  const loadMeshData = async () => {
    try {
      setLoading(true)
      setError(null)
      
      console.log(`[YftViewer] Requesting mesh data for vehicle: ${vehicleName}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ALT:V
      if (typeof window === 'undefined' || !('alt' in window)) {
        throw new Error('ALT:V –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. Viewer —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ.')
      }

      // –°–æ–∑–¥–∞–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–º–µ–Ω–∏)
      const fileHash = await YFTCache.createFileHash(vehicleName, 0)
      console.log(`[YftViewer] üîç File hash for ${vehicleName}: ${fileHash}`)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—ç—à–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      console.log(`[YftViewer] üîç Trying to load from cache: ${vehicleName}`)
      const cachedData = await loadFromCache(vehicleName)
      if (cachedData) {
        console.log(`[YftViewer] ‚úÖ Loaded from cache: ${vehicleName} (vertices: ${cachedData.metadata.vertexCount})`)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ArrayBuffer –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤—ã
        const verticesArray = new Float32Array(cachedData.meshData, 0, cachedData.metadata.vertexCount * 3)
        const indicesArray = new Uint32Array(cachedData.meshData, verticesArray.byteLength)
        
        const data: MeshData = {
          vertices: Array.from(verticesArray),
          indices: Array.from(indicesArray),
          bounds: {
            min: { 
              x: cachedData.metadata.boundingBox.min[0],
              y: cachedData.metadata.boundingBox.min[1],
              z: cachedData.metadata.boundingBox.min[2]
            },
            max: { 
              x: cachedData.metadata.boundingBox.max[0],
              y: cachedData.metadata.boundingBox.max[1],
              z: cachedData.metadata.boundingBox.max[2]
            }
          }
        }
        
        setMeshData(data)
        toast.success(`–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞: ${cachedData.metadata.vertexCount.toLocaleString()} –≤–µ—Ä—à–∏–Ω`)
        return
      }
      
      console.log(`[YftViewer] Cache miss, loading from server: ${vehicleName}`)
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º mesh –¥–∞–Ω–Ω—ã–µ —É C# –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ ALT:V
      const data = await requestMeshDataFromServer(vehicleName)
      
      if (!data) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å mesh –¥–∞–Ω–Ω—ã–µ')
      }
      
      console.log(`[YftViewer] Mesh data loaded:`, {
        vertices: data.vertices.length / 3,
        triangles: data.indices.length / 3
      })
      
      setMeshData(data)
      toast.success(`–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${(data.vertices.length / 3).toLocaleString()} –≤–µ—Ä—à–∏–Ω`)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      try {
        // –°–æ–∑–¥–∞–µ–º ArrayBuffer –¥–ª—è mesh –¥–∞–Ω–Ω—ã—Ö
        const totalSize = data.vertices.length * 4 + data.indices.length * 4 // Float32 + Uint32
        const meshDataBuffer = new ArrayBuffer(totalSize)
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ArrayBuffer
        const verticesView = new Float32Array(meshDataBuffer, 0, data.vertices.length)
        const indicesView = new Uint32Array(meshDataBuffer, verticesView.byteLength, data.indices.length)
        verticesView.set(data.vertices)
        indicesView.set(data.indices)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await saveToCache({
          fileHash,
          fileName: vehicleName,
          fileSize: totalSize,
          meshData: meshDataBuffer,
          metadata: {
            vertexCount: data.vertices.length / 3,
            faceCount: data.indices.length / 3,
            hasNormals: false, // YFT —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ—Ä–º–∞–ª–∏
            hasUVs: false, // YFT —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            boundingBox: data.bounds ? {
              min: [data.bounds.min.x, data.bounds.min.y, data.bounds.min.z] as [number, number, number],
              max: [data.bounds.max.x, data.bounds.max.y, data.bounds.max.z] as [number, number, number]
            } : {
              min: [0, 0, 0] as [number, number, number],
              max: [0, 0, 0] as [number, number, number]
            }
          }
        })
        
        console.log(`[YftViewer] ‚úÖ Cached ${vehicleName} successfully`)
      } catch (err) {
        console.error('[YftViewer] Cache save failed:', err)
      }
      
    } catch (err: any) {
      console.error('[YftViewer] Error loading mesh data:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏')
      toast.error(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏')
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –ó–∞–ø—Ä–æ—Å mesh –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ ALT:V (—á–∞–Ω–∫–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å –ø–ª–∞–≤–Ω—ã–º UI)
   */
  const requestMeshDataFromServer = (vehicleName: string): Promise<MeshData> => {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç'))
      }, 120000) // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      
      let webviewState: {
        vertices: number[]
        indices: number[]
        bounds: any
        receivedV: number
        receivedI: number
        totalV: number
        totalI: number
      } | null = null
      
      const handleWebviewStart = (data: { totalVertices: number; totalIndices: number; bounds: any }) => {
        console.log(`[YftViewer] üöÄ Webview streaming start: V=${data.totalVertices}, I=${data.totalIndices}`)
        webviewState = {
          vertices: new Array(data.totalVertices).fill(0),
          indices: new Array(data.totalIndices).fill(0),
          bounds: data.bounds,
          receivedV: 0,
          receivedI: 0,
          totalV: data.totalVertices,
          totalI: data.totalIndices
        }
      }
      
      const handleWebviewChunk = (chunk: { kind: string; offset: number; data: number[] }) => {
        if (!webviewState) return
        
        if (chunk.kind === 'v') {
          for (let i = 0; i < chunk.data.length; i++) {
            webviewState.vertices[chunk.offset + i] = chunk.data[i]
          }
          webviewState.receivedV += chunk.data.length
        } else if (chunk.kind === 'i') {
          for (let i = 0; i < chunk.data.length; i++) {
            webviewState.indices[chunk.offset + i] = chunk.data[i]
          }
          webviewState.receivedI += chunk.data.length
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–∞–≤–Ω–æ
        setProgress({
          v: Math.round((webviewState.receivedV / webviewState.totalV) * 100),
          i: Math.round((webviewState.receivedI / webviewState.totalI) * 100),
          phase: 'chunk'
        })
      }
      
      const handleWebviewEnd = () => {
        if (!webviewState) {
          reject(new Error('No data received'))
          return
        }
        
        console.log(`[YftViewer] ‚úÖ Webview streaming complete!`)
        
        cleanup()
        resolve({
          vertices: webviewState.vertices,
          indices: webviewState.indices,
          bounds: webviewState.bounds
        })
      }
      
      const handleMeshError = (error: { message: string }) => {
        cleanup()
        reject(new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'))
      }

      const handleProgress = (data: { phase: 'start'|'chunk'|'end'; vProgress?: number; iProgress?: number }) => {
        if (!data) return
        if (data.phase === 'start') setProgress({ v: 0, i: 0, phase: 'start' })
        else if (data.phase === 'chunk') setProgress({ v: Math.round((data.vProgress || 0)*100), i: Math.round((data.iProgress || 0)*100), phase: 'chunk' })
        else if (data.phase === 'end') setProgress({ v: 100, i: 100, phase: 'end' })
      }
      
      const cleanup = () => {
        clearTimeout(timeout)
        ;(window as any).alt.off('vehicle:mesh:webview:start', handleWebviewStart)
        ;(window as any).alt.off('vehicle:mesh:webview:chunk', handleWebviewChunk)
        ;(window as any).alt.off('vehicle:mesh:webview:end', handleWebviewEnd)
        ;(window as any).alt.off('vehicle:mesh:error', handleMeshError)
        ;(window as any).alt.off('vehicle:mesh:progress', handleProgress)
      }
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      ;(window as any).alt.on('vehicle:mesh:webview:start', handleWebviewStart)
      ;(window as any).alt.on('vehicle:mesh:webview:chunk', handleWebviewChunk)
      ;(window as any).alt.on('vehicle:mesh:webview:end', handleWebviewEnd)
      ;(window as any).alt.on('vehicle:mesh:error', handleMeshError)
      ;(window as any).alt.on('vehicle:mesh:progress', handleProgress)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      ;(window as any).alt.emit('vehicle:mesh:request', { vehicleName })
      
      console.log(`[YftViewer] üì§ Request sent for vehicle: ${vehicleName}`)
    })
  }
  
  /**
   * –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã
   */
  const handleResetCamera = () => {
    toast.success('–ö–∞–º–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞')
    // –ö–∞–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—Å–∏—Ç—Å—è —á–µ—Ä–µ–∑ OrbitControls reset
  }
  
  return (
    <div 
      className={`w-full h-full flex flex-col ${gameViewMode ? 'game-view-transparent' : ''}`}
      style={gameViewMode ? { 
        background: 'transparent',
        backgroundColor: 'transparent'
      } : undefined}
    >
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä viewer –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ä–æ–¥–∏—Ç–µ–ª—è */}
        {/* Header - —Å–∫—Ä—ã–≤–∞–µ–º –≤ Game View —Ä–µ–∂–∏–º–µ */}
        {!gameViewMode && (
        <div className="flex items-center justify-between px-3 sm:px-4 lg:px-6 py-3 sm:py-4 border-b border-base-700">
          <div className="flex items-center space-x-2 sm:space-x-3 min-w-0">
            <Box className="w-4 sm:w-5 h-4 sm:h-5 text-primary-400 flex-shrink-0" />
            <h2 className="text-base lg:text-lg font-bold text-white truncate">
              YFT 3D Viewer - {vehicleName}
            </h2>
            {meshData && (
              <div className="flex items-center space-x-2 text-xs text-gray-400">
                <span className="px-2 py-1 bg-primary-900/30 rounded">
                  {(meshData.vertices.length / 3).toLocaleString()} –≤–µ—Ä—à–∏–Ω
                </span>
                <span className="px-2 py-1 bg-fuchsia-900/30 rounded">
                  {(meshData.indices.length / 3).toLocaleString()} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
                </span>
              </div>
            )}
          </div>
          
          {/* Toolbar */}
          <div className="flex items-center space-x-1 sm:space-x-2 flex-wrap gap-1">
            {/* Wireframe */}
            <button
              onClick={() => setViewMode('wireframe')}
              disabled={loading}
              className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium transition-all ${
                viewMode === 'wireframe'
                  ? 'bg-green-600 text-white'
                  : 'bg-base-800 text-gray-400 hover:bg-base-700'
              }`}
              title="Wireframe —Ä–µ–∂–∏–º"
            >
              <Eye className="w-4 h-4" />
              <span>Wireframe</span>
            </button>
            
            {/* Solid */}
            <button
              onClick={() => setViewMode('solid')}
              disabled={loading}
              className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium transition-all ${
                viewMode === 'solid'
                  ? 'bg-blue-600 text-white'
                  : 'bg-base-800 text-gray-400 hover:bg-base-700'
              }`}
              title="Solid —Ä–µ–∂–∏–º"
            >
              <Box className="w-4 h-4" />
              <span>Solid</span>
            </button>
            
            {/* Real View */}
            <button
              onClick={() => setViewMode('real')}
              disabled={loading}
              className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium transition-all ${
                viewMode === 'real'
                  ? 'bg-purple-600 text-white'
                  : 'bg-base-800 text-gray-400 hover:bg-base-700'
              }`}
              title="Real View (solid + wireframe)"
            >
              <Eye className="w-4 h-4" />
              <span>Real View</span>
            </button>
            
            {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
            <div className="w-px h-8 bg-base-700" />
            
            {/* Game View */}
            <button
              onClick={() => setGameViewMode(!gameViewMode)}
              disabled={loading}
              className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium transition-all ${
                gameViewMode
                  ? 'bg-orange-600 text-white animate-pulse'
                  : 'bg-base-800 text-gray-400 hover:bg-base-700'
              }`}
              title="Game View - –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–∞—à–∏–Ω—É –≤ –∏–≥—Ä–µ (ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
            >
              <Eye className="w-4 h-4" />
              <span>Game View</span>
            </button>
            
            {/* Toggle Grid */}
            <button
              onClick={() => setShowGrid(!showGrid)}
              className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium transition-all ${
                showGrid
                  ? 'bg-purple-600 text-white'
                  : 'bg-base-800 text-gray-400 hover:bg-base-700'
              }`}
              title={showGrid ? '–°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É'}
            >
              <GridIcon className="w-4 h-4" />
              <span>Grid</span>
            </button>
            
            {/* Cache Management */}
            {isCacheAvailable && (
              <>
                <div className="w-px h-8 bg-base-700" />
                
                {/* Cache Stats */}
                <button
                  onClick={refreshStats}
                  className="flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium bg-base-800 text-gray-400 hover:bg-base-700 transition-all"
                  title={`–ö—ç—à: ${cacheStatus.stats ? `${cacheStatus.stats.totalItems} –º–æ–¥–µ–ª–µ–π, ${YFTCache.formatSize(cacheStatus.stats.totalSize)}` : '–ó–∞–≥—Ä—É–∑–∫–∞...'}`}
                >
                  <Database className="w-4 h-4" />
                  <span>
                    {cacheStatus.stats ? `${cacheStatus.stats.totalItems}` : '?'}
                  </span>
                </button>
                
                {/* Clear Cache */}
                <button
                  onClick={clearCache}
                  disabled={cacheStatus.savingToCache}
                  className="flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium bg-red-800 text-red-200 hover:bg-red-700 transition-all disabled:opacity-50"
                  title="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –º–æ–¥–µ–ª–µ–π"
                >
                  <Trash2 className="w-4 h-4" />
                  <span>Clear</span>
                </button>
              </>
            )}
            
            {/* Reset Camera */}
            <button
              onClick={handleResetCamera}
              className="p-2 rounded-lg bg-base-800 text-gray-400 hover:bg-base-700 hover:text-white transition-all"
              title="–°–±—Ä–æ—Å–∏—Ç—å –∫–∞–º–µ—Ä—É"
            >
              <RotateCcw className="w-4 h-4" />
            </button>
            
            {/* Close */}
            <button
              onClick={onClose}
              className="p-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition-all"
              title="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>
        )}
        
        {/* 3D Canvas */}
        <div 
          className={`flex-1 relative ${gameViewMode ? '' : 'bg-gradient-to-b from-base-900 to-black'}`}
          style={gameViewMode ? {
            background: 'transparent',
            backgroundColor: 'transparent'
          } : undefined}
        >
          
          {/* –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Game View + Debug Info */}
          {gameViewMode && (
            <div className="absolute top-4 right-4 z-50 flex flex-col items-end space-y-2">
              <button
                onClick={() => setGameViewMode(false)}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg shadow-lg flex items-center space-x-2 transition-all animate-pulse"
                title="–í—ã–π—Ç–∏ –∏–∑ Game View (ESC)"
              >
                <X className="w-4 h-4" />
                <span className="font-medium">–í—ã—Ö–æ–¥ (ESC)</span>
              </button>
              
              {/* Debug Info Panel */}
              <div className="bg-black/80 backdrop-blur-sm px-3 py-2 rounded-lg border border-green-500/30 space-y-1">
                <div className="text-xs font-bold text-green-400 mb-1">
                  üé• Camera Sync Debug
                </div>
                <div className="text-xs text-white font-mono">
                  <div className="flex justify-between space-x-3">
                    <span className="text-gray-400">Offset:</span>
                    <span className="text-blue-400">{debugInfo.cameraOffset.toFixed(2)}m</span>
                  </div>
                </div>
              </div>
              
              {/* Debug Axes Toggle */}
              <div className="text-xs text-white bg-black/70 px-3 py-2 rounded-lg">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input 
                    type="checkbox"
                    checked={showDebugAxes}
                    onChange={(e) => setShowDebugAxes(e.target.checked)}
                    className="w-3 h-3 rounded"
                  />
                  <span>Debug Axes</span>
                </label>
              </div>
              
              {/* Calibration Panel */}
              <div className="text-xs text-white bg-black/90 p-3 rounded-lg border border-purple-500/50 w-full max-w-xs overflow-y-auto max-h-[60vh] overflow-x-hidden">
                <div className="font-bold text-purple-400 mb-2">üéõÔ∏è Live Calibration</div>
                
                {/* Model Rotation */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">Model Rotation (degrees):</div>
                  {(['x', 'y', 'z'] as const).map((axis) => (
                    <div key={axis} className="flex items-center gap-2">
                      <span className={`w-12 ${axis === 'x' ? 'text-red-400' : axis === 'y' ? 'text-green-400' : 'text-blue-400'}`}>
                        {axis.toUpperCase()}:
                      </span>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelRotation: { ...prev.modelRotation, [axis]: prev.modelRotation[axis] - 15 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-15</button>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelRotation: { ...prev.modelRotation, [axis]: prev.modelRotation[axis] - 5 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-5</button>
                      <span className="w-12 text-center text-yellow-300">{calibration.modelRotation[axis]}¬∞</span>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelRotation: { ...prev.modelRotation, [axis]: prev.modelRotation[axis] + 5 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+5</button>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelRotation: { ...prev.modelRotation, [axis]: prev.modelRotation[axis] + 15 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+15</button>
                    </div>
                  ))}
                </div>
                
                {/* Model Offset */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">Model Offset (meters):</div>
                  {(['x', 'y', 'z'] as const).map((axis) => (
                    <div key={axis} className="flex items-center gap-2">
                      <span className={`w-12 ${axis === 'x' ? 'text-red-400' : axis === 'y' ? 'text-green-400' : 'text-blue-400'}`}>
                        {axis.toUpperCase()}:
                      </span>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelOffset: { ...prev.modelOffset, [axis]: prev.modelOffset[axis] - 0.5 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-0.5</button>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelOffset: { ...prev.modelOffset, [axis]: prev.modelOffset[axis] - 0.1 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-0.1</button>
                      <span className="w-12 text-center text-yellow-300">{calibration.modelOffset[axis].toFixed(1)}</span>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelOffset: { ...prev.modelOffset, [axis]: prev.modelOffset[axis] + 0.1 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+0.1</button>
                      <button onClick={() => setCalibration(prev => ({ ...prev, modelOffset: { ...prev.modelOffset, [axis]: prev.modelOffset[axis] + 0.5 } }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+0.5</button>
                    </div>
                  ))}
                </div>
                
                {/* Camera Invert */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">Camera Invert:</div>
                  {(['x', 'y', 'z'] as const).map((axis) => (
                    <div key={axis} className="flex items-center gap-2">
                      <span className={`w-12 ${axis === 'x' ? 'text-red-400' : axis === 'y' ? 'text-green-400' : 'text-blue-400'}`}>
                        {axis.toUpperCase()}:
                      </span>
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input 
                          type="checkbox"
                          checked={calibration.cameraInvert[axis]}
                          onChange={(e) => setCalibration(prev => ({ ...prev, cameraInvert: { ...prev.cameraInvert, [axis]: e.target.checked } }))}
                          className="w-3 h-3 rounded"
                        />
                        <span>{calibration.cameraInvert[axis] ? 'Inverted' : 'Normal'}</span>
                      </label>
                    </div>
                  ))}
                </div>
                
                {/* Apply Roll */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">Camera Roll:</div>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input 
                      type="checkbox"
                      checked={calibration.applyRoll}
                      onChange={(e) => setCalibration(prev => ({ ...prev, applyRoll: e.target.checked }))}
                      className="w-3 h-3 rounded"
                    />
                    <span>{calibration.applyRoll ? 'Applied' : 'Disabled'} (–∫—Ä–µ–Ω –∫–∞–º–µ—Ä—ã)</span>
                  </label>
                </div>
                
                {/* Base FOV */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">Base FOV (static):</div>
                  <div className="flex items-center gap-2">
                    <button onClick={() => setCalibration(prev => ({ ...prev, baseFov: prev.baseFov - 10 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-10</button>
                    <button onClick={() => setCalibration(prev => ({ ...prev, baseFov: prev.baseFov - 5 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-5</button>
                    <span className="w-16 text-center text-cyan-300">{calibration.baseFov.toFixed(0)}¬∞</span>
                    <button onClick={() => setCalibration(prev => ({ ...prev, baseFov: prev.baseFov + 5 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+5</button>
                    <button onClick={() => setCalibration(prev => ({ ...prev, baseFov: prev.baseFov + 10 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+10</button>
                  </div>
                </div>
                
                {/* FOV Multiplier */}
                <div className="space-y-1 mb-3">
                  <div className="text-gray-300 font-semibold">FOV Multiplier:</div>
                  <div className="flex items-center gap-2">
                    <button onClick={() => setCalibration(prev => ({ ...prev, fovMultiplier: prev.fovMultiplier - 0.1 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-0.1</button>
                    <button onClick={() => setCalibration(prev => ({ ...prev, fovMultiplier: prev.fovMultiplier - 0.05 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">-0.05</button>
                    <span className="w-16 text-center text-yellow-300">{calibration.fovMultiplier.toFixed(2)}x</span>
                    <button onClick={() => setCalibration(prev => ({ ...prev, fovMultiplier: prev.fovMultiplier + 0.05 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+0.05</button>
                    <button onClick={() => setCalibration(prev => ({ ...prev, fovMultiplier: prev.fovMultiplier + 0.1 }))} className="px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded">+0.1</button>
                  </div>
                  <div className="text-xs text-gray-400 text-center">Final: {(calibration.baseFov * calibration.fovMultiplier).toFixed(1)}¬∞</div>
                </div>
                
                {/* Copy Config Button */}
                <button
                  onClick={() => {
                    const config = JSON.stringify(calibration, null, 2)
                    navigator.clipboard.writeText(config)
                    toast.success('Config copied to clipboard!')
                  }}
                  className="w-full px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-semibold"
                >
                  üìã Copy Config
                </button>
              </div>
              
              <div className="text-xs text-white bg-black/70 px-3 py-2 rounded-lg">
                Game View Mode Active
              </div>
            </div>
          )}
          
          {loading && (
            <div className="absolute inset-0 flex items-center justify-center z-10">
              <div className="text-center space-y-3">
                <div className="w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto" />
                <p className="text-white text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...</p>
                <p className="text-gray-400 text-xs">–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ mesh –¥–∞–Ω–Ω—ã—Ö –∏–∑ .yft —Ñ–∞–π–ª–∞</p>
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ */}
                {(progress.phase !== 'idle') && (
                  <div className="mt-2 w-80 mx-auto text-left">
                    <div className="text-xs text-gray-400 mb-1">Vertices: {progress.v}%</div>
                    <div className="w-full h-2 bg-base-800 rounded">
                      <div className="h-2 bg-primary-600 rounded" style={{ width: `${progress.v}%` }} />
                    </div>
                    <div className="text-xs text-gray-400 mt-2 mb-1">Indices: {progress.i}%</div>
                    <div className="w-full h-2 bg-base-800 rounded">
                      <div className="h-2 bg-fuchsia-600 rounded" style={{ width: `${progress.i}%` }} />
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {error && (
            <div className="absolute inset-0 flex items-center justify-center z-10">
              <div className="text-center space-y-3 p-8 bg-red-900/20 border border-red-500/30 rounded-lg">
                <div className="w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center mx-auto">
                  <X className="w-6 h-6 text-red-400" />
                </div>
                <p className="text-red-400 text-sm font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏</p>
                <p className="text-gray-400 text-xs max-w-md">{error}</p>
                <button
                  onClick={loadMeshData}
                  className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-all"
                >
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
            </div>
          )}
          
          {!loading && !error && meshData && (
            <Canvas 
              gl={{ 
                alpha: true,
                premultipliedAlpha: false,
                preserveDrawingBuffer: true
              }}
              style={{ 
                background: gameViewMode ? 'transparent' : 'linear-gradient(to bottom, #0a0a0a, #000000)'
              }}
            >
              <Suspense fallback={null}>
                {/* –ö–∞–º–µ—Ä–∞ */}
                <PerspectiveCamera makeDefault position={[5, 3, 5]} />
                
                {/* –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –≤ Game View —Ä–µ–∂–∏–º–µ */}
                <CameraSync 
                  enabled={gameViewMode} 
                  cameraRef={cameraRef}
                  calibration={{
                    cameraInvert: calibration.cameraInvert,
                    baseFov: calibration.baseFov,
                    fovMultiplier: calibration.fovMultiplier,
                    applyRoll: calibration.applyRoll
                  }}
                />
                
                {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
                <ambientLight intensity={0.5} />
                <directionalLight position={[10, 10, 5]} intensity={1} />
                <pointLight position={[-10, -10, -5]} intensity={0.5} />
                
                {/* –°–µ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - —Å–∫—Ä—ã–≤–∞–µ–º –≤ Game View —Ä–µ–∂–∏–º–µ */}
                {showGrid && !gameViewMode && (
                  <ThreeGrid 
                    args={[20, 20]} 
                    cellColor="#444444" 
                    sectionColor="#666666"
                    fadeDistance={50}
                    fadeStrength={1}
                    position={[0, 0, 0]}
                  />
                )}
                
                {/* 3D –ú–æ–¥–µ–ª—å - –ø–µ—Ä–µ–¥–∞–µ–º gameViewMode –∏ vehicleRotation –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
                <VehicleModel 
                  meshData={meshData} 
                  viewMode={viewMode}
                  gameViewMode={gameViewMode}
                  vehicleRotation={vehicleRotation || undefined}
                  showDebugAxes={showDebugAxes}
                  calibration={gameViewMode ? calibration : undefined}
                />
                
                {/* –ö–æ–Ω—Ç—Ä–æ–ª–ª—ã –∫–∞–º–µ—Ä—ã - –û–¢–ö–õ–Æ–ß–ï–ù–´ –≤ Game View —Ä–µ–∂–∏–º–µ */}
                <OrbitControls 
                  enabled={!gameViewMode}
                  enableDamping
                  dampingFactor={0.05}
                  rotateSpeed={0.5}
                  zoomSpeed={0.8}
                  minDistance={2}
                  maxDistance={50}
                  mouseButtons={{
                    LEFT: THREE.MOUSE.ROTATE,
                    MIDDLE: THREE.MOUSE.DOLLY,
                    RIGHT: THREE.MOUSE.PAN // –ü–ö–ú –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
                  }}
                />
              </Suspense>
            </Canvas>
          )}
        </div>
        
        {/* Footer - Controls Help - —Å–∫—Ä—ã–≤–∞–µ–º –≤ Game View —Ä–µ–∂–∏–º–µ */}
        {!gameViewMode && (
        <div className="px-3 sm:px-4 lg:px-6 py-2 sm:py-3 border-t border-base-700 bg-base-800/50">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 text-xs text-gray-400">
            <div className="flex items-center space-x-2 sm:space-x-4 flex-wrap gap-1">
              <span>üñ±Ô∏è –õ–ö–ú - –í—Ä–∞—â–µ–Ω–∏–µ</span>
              <span>üñ±Ô∏è –ü–ö–ú - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ</span>
              <span>üñ±Ô∏è –ö–æ–ª–µ—Å–∏–∫–æ - –ó—É–º</span>
            </div>
            <div className="flex items-center space-x-2">
              <span className={`${viewMode === 'wireframe' ? 'text-green-400' : viewMode === 'solid' ? 'text-blue-400' : 'text-purple-400'}`}>‚óè</span>
              <span>
                {viewMode === 'wireframe' && 'Wireframe —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω'}
                {viewMode === 'solid' && 'Solid —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω'}
                {viewMode === 'real' && 'Real View —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω'}
              </span>
            </div>
          </div>
        </div>
        )}
    </div>
  )
}

export default YftViewer

