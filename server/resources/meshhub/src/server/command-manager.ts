// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è MeshHub

import * as alt from 'alt-server'

export class CommandManager {
  private static isInitialized = false

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
   */
  static initialize(): void {
    if (this.isInitialized) {
      alt.logWarning('[MeshHub] CommandManager already initialized')
      return
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    this.registerCommands()

    this.isInitialized = true
    alt.log('[MeshHub] ‚úÖ CommandManager initialized')
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
   */
  private static registerCommands(): void {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /meshhub
    alt.onClient('consoleCommand', (player: alt.Player, command: string, ...args: string[]) => {
      if (command === 'meshhub') {
        this.handleMeshHubCommand(player, args)
      }
    })

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    alt.onClient('consoleCommand', (player: alt.Player, command: string, ...args: string[]) => {
      switch (command) {
        case 'mh':
        case 'mesh':
          this.handleMeshHubCommand(player, args)
          break
        case 'meshhub-panel':
        case 'mhpanel':
          this.handleToggleCommand(player)
          break
      }
    })

    alt.log('[MeshHub] Commands registered: /meshhub, /mh, /mesh, /meshhub-panel')
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /meshhub
   */
  private static handleMeshHubCommand(player: alt.Player, args: string[]): void {
    if (args.length === 0) {
      // –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
      this.handleToggleCommand(player)
      return
    }

    const subcommand = args[0].toLowerCase()

    switch (subcommand) {
      case 'open':
      case 'show':
        this.handleOpenCommand(player)
        break

      case 'close':
      case 'hide':
        this.handleCloseCommand(player)
        break

      case 'toggle':
        this.handleToggleCommand(player)
        break

      case 'help':
      case '?':
        this.handleHelpCommand(player)
        break

      case 'version':
      case 'v':
        this.handleVersionCommand(player)
        break

      case 'status':
        this.handleStatusCommand(player)
        break

      default:
        player.send(`[MeshHub] ‚ùå Unknown command: ${subcommand}`)
        player.send('[MeshHub] Use /meshhub help for available commands')
        break
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
   */
  private static handleOpenCommand(player: alt.Player): void {
    alt.log(`[MeshHub] Player ${player.name} requested to open panel`)
    
    alt.emitClient(player, 'meshhub:open')
    player.send('[MeshHub] üì± Opening MeshHub panel...')
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
   */
  private static handleCloseCommand(player: alt.Player): void {
    alt.log(`[MeshHub] Player ${player.name} requested to close panel`)
    
    alt.emitClient(player, 'meshhub:close')
    player.send('[MeshHub] üì± Closing MeshHub panel...')
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
   */
  private static handleToggleCommand(player: alt.Player): void {
    alt.log(`[MeshHub] Player ${player.name} requested to toggle panel`)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç—É - –æ–Ω —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å
    alt.emitClient(player, 'meshhub:toggle')
    player.send('[MeshHub] üì± Toggling MeshHub panel...')
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
   */
  private static handleHelpCommand(player: alt.Player): void {
    const helpMessages = [
      '[MeshHub] üìñ Available commands:',
      '[MeshHub] /meshhub - Open/close panel',
      '[MeshHub] /meshhub open - Open panel',
      '[MeshHub] /meshhub close - Close panel',
      '[MeshHub] /meshhub toggle - Toggle panel',
      '[MeshHub] /meshhub help - Show this help',
      '[MeshHub] /meshhub version - Show version',
      '[MeshHub] /meshhub status - Show status',
      '',
      '[MeshHub] üéÆ Controls:',
      '[MeshHub] F10 - Toggle panel',
      '[MeshHub] ESC - Close panel (when open)',
      '',
      '[MeshHub] üöó Features:',
      '[MeshHub] ‚Ä¢ Browse and download vehicles from MeshHub',
      '[MeshHub] ‚Ä¢ Edit vehicle handling in real-time',
      '[MeshHub] ‚Ä¢ Save changes to server or download locally',
      '[MeshHub] ‚Ä¢ Spawn and manage vehicles in-game'
    ]

    helpMessages.forEach(message => player.send(message))
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä—Å–∏–∏
   */
  private static handleVersionCommand(player: alt.Player): void {
    player.send('[MeshHub] üìã Version Information:')
    player.send('[MeshHub] ‚Ä¢ Resource Version: 1.0.0')
    player.send('[MeshHub] ‚Ä¢ ALT:V Integration: Active')
    player.send('[MeshHub] ‚Ä¢ WebView: React 18 + TypeScript')
    player.send('[MeshHub] ‚Ä¢ Backend: hub.feeld.space')
    player.send('[MeshHub] ‚Ä¢ Author: MeshHub Team')
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  private static handleStatusCommand(player: alt.Player): void {
    const playerCount = alt.Player.all.length
    const vehicleCount = alt.Vehicle.all.length
    
    player.send('[MeshHub] üìä Status Information:')
    player.send(`[MeshHub] ‚Ä¢ Players Online: ${playerCount}`)
    player.send(`[MeshHub] ‚Ä¢ Vehicles Spawned: ${vehicleCount}`)
    player.send('[MeshHub] ‚Ä¢ Resource Status: Active')
    player.send('[MeshHub] ‚Ä¢ WebView Status: Ready')
    player.send('[MeshHub] ‚Ä¢ Backend Status: Connected')
  }

  /**
   * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  static broadcastPanelToggle(adminPlayer: alt.Player): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if (!this.isAdmin(adminPlayer)) {
      adminPlayer.send('[MeshHub] ‚ùå You do not have permission to use this command')
      return
    }

    alt.log(`[MeshHub] Admin ${adminPlayer.name} broadcasting panel toggle`)
    
    alt.Player.all.forEach(player => {
      if (player.valid && player !== adminPlayer) {
        alt.emitClient(player, 'meshhub:toggle')
      }
    })

    adminPlayer.send('[MeshHub] üì¢ Toggled MeshHub panel for all players')
    alt.Player.all.forEach(player => {
      if (player.valid && player !== adminPlayer) {
        player.send('[MeshHub] üì± Admin toggled MeshHub panel')
      }
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static isAdmin(player: alt.Player): boolean {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∞–≤
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return false
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ—Å—É—Ä—Å–∞
   */
  static cleanup(): void {
    this.isInitialized = false
    alt.log('[MeshHub] CommandManager cleaned up')
  }
}
